{
  "metadata": {
    "id": "01-system-initialization",
    "title": "System Initialization Directives",
    "priority": "critical",
    "frequency": "session-start",
    "version": "1.0.0",
    "humanReadable": "reference/directivesmd/01-system-initialization.md"
  },
  "triggers": [
    "MCP server startup",
    "First connection",
    "System boot",
    "Session start",
    "Instance initialization",
    "Git repository setup needed"
  ],
  "workflows": {
    "automaticStateNotification": {
      "directive": "Upon MCP server connection, immediately analyze project state and notify user with next-step options without waiting for user request",
      "criticalRequirement": "This must happen automatically during server initialization, not when the user first asks for something",
      "steps": [
        {
          "action": "detectProjectDirectory",
          "description": "Detect current project directory and structure",
          "required": true
        },
        {
          "action": "checkProjectManagementExists",
          "description": "Check for projectManagement/ directory existence and completeness",
          "required": true
        },
        {
          "action": "analyzeComponentStatus", 
          "description": "Analyze component status (blueprint, themes, flows, database, tasks)",
          "required": true,
          "components": ["blueprint", "metadata", "flow_index", "themes", "completion_path", "database"]
        },
        {
          "action": "categorizeProjectState",
          "description": "Categorize state: none/partial/complete/unknown",
          "required": true,
          "categories": ["none", "partial", "complete", "unknown"]
        },
        {
          "action": "presentStateAnalysis",
          "description": "Present formatted state analysis directly to user via stderr",
          "required": true,
          "outputFormat": "stderr to avoid interfering with MCP protocol"
        },
        {
          "action": "provideClearOptions",
          "description": "Provide clear next-step options based on current state",
          "required": true
        },
        {
          "action": "waitForUserChoice",
          "description": "Wait for user choice before proceeding with any actions",
          "required": true
        }
      ],
      "stateResponses": {
        "none": {
          "message": "No project management structure found",
          "options": ["Initialize new project", "Review project status", "Check existing code"]
        },
        "partial": {
          "message": "Show existing/missing components with status indicators",
          "options": ["Complete initialization", "Review current state", "Continue with existing"]
        },
        "complete": {
          "message": "Show component summary and task counts", 
          "options": ["Get detailed status", "Start/resume session", "View active tasks"]
        },
        "unknown": {
          "message": "Could not determine project state",
          "options": ["Manual analysis", "Force initialization", "Check logs"]
        }
      }
    },
    "mcpServerConnection": {
      "directive": "Always verify MCP server connectivity and tool availability before beginning any project work",
      "steps": [
        {
          "action": "checkMcpServerStatus",
          "description": "Check MCP server status",
          "required": true
        },
        {
          "action": "verifyRequiredTools",
          "description": "Verify all required tools are available",
          "required": true,
          "tools": [
            "project_initialize",
            "project_get_blueprint", 
            "project_update_blueprint",
            "project_get_status",
            "theme_discover",
            "theme_create",
            "theme_list",
            "theme_get",
            "theme_update",
            "theme_delete",
            "theme_get_context",
            "theme_validate",
            "create_instance_branch",
            "list_instance_branches",
            "get_branch_status",
            "merge_instance_branch",
            "delete_instance_branch",
            "switch_to_branch",
            "get_current_user",
            "get_config",
            "read_file"
          ]
        },
        {
          "action": "loadServerConfiguration",
          "description": "Load server configuration and validate settings",
          "required": true
        },
        {
          "action": "confirmProjectStructure",
          "description": "Confirm project management structure exists or initialize if needed",
          "required": true
        }
      ]
    },
    "projectDetection": {
      "directive": "Always detect existing project management structures and handle compatibility issues",
      "rules": [
        "If projectManagement/ exists, check version compatibility",
        "If compatible, integrate existing data",
        "If incompatible, ask user for migration approach (upgrade, backup, or overwrite)",
        "Never overwrite existing data without explicit user permission",
        "Document any compatibility issues or migrations performed"
      ],
      "steps": [
        {
          "action": "checkProjectManagementExists",
          "description": "Check if projectManagement/ directory exists",
          "required": true
        },
        {
          "action": "checkCompatibility",
          "description": "Check version compatibility if structure exists",
          "required": true,
          "condition": "projectManagement exists"
        },
        {
          "action": "handleCompatibility",
          "description": "Handle compatibility based on check results",
          "required": true,
          "options": ["integrate", "migrate", "upgrade", "backup", "overwrite"]
        }
      ]
    },
    "configurationLoading": {
      "directive": "Load configuration in priority order",
      "priority": [
        "projectManagement/UserSettings/config.json",
        "config.json (current directory)",
        "~/.ai-project-manager/config.json",
        "/etc/ai-project-manager/config.json",
        "Environment variables (AI_PM_*)",
        "Built-in defaults"
      ],
      "steps": [
        {
          "action": "loadConfiguration",
          "description": "Load configuration from priority sources",
          "required": true
        },
        {
          "action": "validateCriticalSettings",
          "description": "Validate critical settings are present",
          "required": true
        }
      ]
    },
    "compatibilityVerification": {
      "directive": "Verify compatibility of existing projectManagement/ structures and handle version differences",
      "requiredMetadataFields": [
        "mcp.version",
        "mcp.namespace", 
        "mcp.created",
        "mcp.compatibilityVersion"
      ],
      "fieldDescriptions": {
        "mcp.version": "MCP system version used to create the structure",
        "mcp.namespace": "Unique project identifier (project.management.organization.{userprojectname})",
        "mcp.created": "ISO timestamp of initial structure creation",
        "mcp.compatibilityVersion": "Version for backward compatibility checking"
      },
      "templateReference": "reference/templates/metadata.json includes all required MCP compatibility fields",
      "steps": [
        {
          "action": "checkMetadataExists",
          "description": "Check if projectManagement/ProjectBlueprint/metadata.json exists",
          "required": true
        },
        {
          "action": "readVersionInfo",
          "description": "Read mcp.version and mcp.compatibilityVersion fields",
          "required": true,
          "condition": "metadata exists"
        },
        {
          "action": "compareVersions",
          "description": "Compare with current MCP version",
          "required": true
        },
        {
          "action": "handleVersionDifference",
          "description": "Handle version differences - if version is lesser than current, ask user if they want to update existing structure",
          "required": true,
          "condition": "version lesser than current",
          "note": "Files themselves should not need significant modification - updates should be backwards compatible"
        },
        {
          "action": "handleUpdateDirectives",
          "description": "With any updates, directives will be added on how to approach updating outdated versions",
          "required": true,
          "condition": "update needed"
        },
        {
          "action": "offerCompleteEvaluation",
          "description": "Ask user if they want to run an initial complete evaluation which will compare the current state of the entire project to the projectManagement state",
          "required": false,
          "userApprovalRequired": true
        },
        {
          "action": "updateFiles",
          "description": "Make updates to files according to analysis. Always assess existing files for each step of analyzing before makes updates, if updates are needed",
          "required": true,
          "condition": "user approves evaluation"
        },
        {
          "action": "continueNormalOperation",
          "description": "Finally, continue with projectManagement as normal",
          "required": true
        }
      ]
    },
    "gitRepositorySetup": {
      "directive": "Initialize and configure Git repository for project code and organizational state tracking",
      "steps": [
        {
          "action": "detectGitRepository",
          "description": "Check if project root has existing Git repository",
          "required": true,
          "detection": [
            "Look for .git/ directory in project root",
            "Verify Git repository integrity if found",
            "Check Git configuration compatibility"
          ]
        },
        {
          "action": "initializeGitIfNeeded", 
          "description": "Initialize Git repository if not found and auto_init_repo enabled",
          "required": true,
          "condition": "no .git/ directory and git.auto_init_repo=true",
          "initialization": [
            "Run git init in project root",
            "Set up initial .gitignore for AI branch management",
            "Create initial commit with project structure"
          ]
        },
        {
          "action": "configureGitIgnore",
          "description": "Set up .gitignore for AI branch management",
          "required": true,
          "gitignoreAdditions": [
            "# AI Branch Management - Track Organizational State Only",
            "projectManagement/UserSettings/",
            "projectManagement/database/backups/",
            "projectManagement/.ai-pm-session-*"
          ]
        },
        {
          "action": "recordInitialGitState",
          "description": "Record initial Git state in database for change detection",
          "required": true,
          "database_operations": [
            "Insert initial git_project_state record",
            "Record current Git hash as baseline",
            "Set reconciliation status to 'initialized'"
          ]
        }
      ]
    },
    "branchIdentification": {
      "directive": "Identify current Git branch and establish branch context",
      "steps": [
        {
          "action": "checkCurrentBranch",
          "description": "Determine current Git branch and branch type",
          "required": true,
          "identification": [
            "Execute: git branch --show-current",
            "Check if on ai-pm-org-main (canonical branch)",
            "Check if on ai-pm-org-branch-{XXX} (work branch)",
            "Parse branch name to extract sequential number if applicable"
          ]
        },
        {
          "action": "establishBranchContext",
          "description": "Set branch context and capabilities based on branch type",
          "required": true,
          "branchTypes": {
            "ai-pm-org-main": [
              "Canonical organizational state authority",
              "Git repository change detection",
              "Merge operations and conflict resolution",
              "Project code change impact assessment"
            ],
            "ai-pm-org-branch-{XXX}": [
              "Independent development within Git branch isolation",
              "Prepare organizational changes for merge", 
              "Sequential numbered branch identification"
            ]
          }
        },
        {
          "action": "validateBranchConfiguration",
          "description": "Ensure branch configuration is valid and consistent",
          "required": true,
          "validation": [
            "Verify ai-pm-org-main branch exists",
            "Check branch naming convention compliance",
            "Validate Git repository state",
            "Confirm branch has proper organizational structure"
          ]
        }
      ]
    },
    "databaseInitialization": {
      "directive": "Initialize database components and establish hybrid file-database architecture",
      "steps": [
        {
          "action": "initializeProjectDatabase",
          "description": "Set up project.db with complete schema",
          "required": true,
          "database_setup": [
            "Create project.db from ai-pm-mcp/database/schema.sql",
            "Initialize all required tables and indexes",
            "Set up database triggers for real-time synchronization",
            "Create performance optimization views"
          ]
        },
        {
          "action": "establishHybridArchitecture",
          "description": "Configure hybrid file-database synchronization",
          "required": true,
          "synchronization": [
            "Set up real-time file-database sync triggers",
            "Configure atomic operation handling",
            "Initialize session persistence system",
            "Set up event analytics and logging"
          ]
        },
        {
          "action": "validateDatabaseIntegrity",
          "description": "Verify database initialization completed successfully",
          "required": true,
          "validation": [
            "Test all database tables and relationships",
            "Verify trigger functionality",
            "Test atomic operation rollback",
            "Confirm performance index effectiveness"
          ]
        }
      ]
    }
  },
  "configSettings": {
    "max_file_lines": {
      "default": 900,
      "type": "number",
      "description": "Maximum lines per file before modularization"
    },
    "auto_modularize": {
      "default": true,
      "type": "boolean",
      "description": "Automatically modularize files exceeding line limits"
    },
    "theme_discovery": {
      "default": true,
      "type": "boolean",
      "description": "Enable automatic theme discovery"
    },
    "git": {
      "type": "object",
      "description": "Git integration configuration",
      "properties": {
        "enabled": {
          "default": true,
          "type": "boolean",
          "description": "Enable Git integration for project tracking"
        },
        "auto_init_repo": {
          "default": true,
          "type": "boolean", 
          "description": "Automatically initialize Git repository if not found"
        },
        "code_change_detection": {
          "default": true,
          "type": "boolean",
          "description": "Enable automatic code change detection during session boot"
        },
        "auto_reconcile_on_boot": {
          "default": true,
          "type": "boolean",
          "description": "Automatically reconcile organizational state with code changes"
        }
      }
    },
    "branch_management": {
      "type": "object",
      "description": "Git branch management configuration",
      "properties": {
        "enabled": {
          "default": true,
          "type": "boolean",
          "description": "Enable Git branch-based management"
        },
        "canonical_branch_authority": {
          "default": true,
          "type": "boolean",
          "description": "ai-pm-org-main branch has ultimate authority for conflict resolution"
        },
        "max_active_branches": {
          "default": 20,
          "type": "number",
          "description": "Maximum number of active AI organizational branches"
        },
        "branch_naming_validation": {
          "default": true,
          "type": "boolean",
          "description": "Enforce ai-pm-org-branch-{XXX} sequential naming conventions"
        },
        "auto_delete_merged": {
          "default": false,
          "type": "boolean",
          "description": "Automatically delete branches after successful merge"
        }
      }
    },
    "database": {
      "type": "object",
      "description": "Database integration configuration",
      "properties": {
        "enabled": {
          "default": true,
          "type": "boolean",
          "description": "Enable database integration for performance optimization"
        },
        "real_time_sync": {
          "default": true,
          "type": "boolean",
          "description": "Enable real-time file-database synchronization"
        },
        "session_persistence": {
          "default": true,
          "type": "boolean",  
          "description": "Enable session context persistence and restoration"
        }
      }
    },
    "log_retention": {
      "type": "object",
      "description": "Log retention policies"
    },
    "context_loading": {
      "type": "object",
      "description": "Context loading preferences"
    }
  },
  "integrations": [
    "02-project-initialization",
    "03-session-management",
    "13-metadata-management",
    "14-branch-management",
    "15-git-integration",
    "database-integration"
  ],
  "dependencies": [
    "UserSettings/config.json",
    "MCP server connectivity",
    "ProjectBlueprint/metadata.json",
    "Git repository (optional, can be created)",
    "Database schema (ai-pm-mcp/database/schema.sql)",
    "Git branch management tools"
  ],
  "keyOperations": [
    "Server validation",
    "Compatibility checking", 
    "Configuration loading",
    "Project structure initialization",
    "Git repository setup",
    "Branch identification",
    "Database initialization",
    "Authority establishment"
  ],
  "errorHandling": {
    "mcpServerUnavailable": "Fail with clear error message",
    "toolsMissing": "Report missing tools and fail gracefully",
    "configurationInvalid": "Use defaults and warn user",
    "compatibilityIssues": "Require user decision before proceeding",
    "gitRepositoryIssues": "Initialize repository or report clear error to user",
    "branchIdentificationFailure": "Default to ai-pm-org-main and warn user",
    "databaseInitializationFailure": "Report error clearly and offer file-only mode",
    "branchAuthorityConflict": "Enforce ai-pm-org-main authority and log conflict"
  },
  "validation": {
    "serverConnection": "Must verify MCP server is responsive",
    "toolAvailability": "All required tools must be available including branch management",
    "configurationValid": "Configuration must pass validation including Git and branch settings",
    "structureIntegrity": "Project structure must be valid or initializable",
    "gitRepositoryValid": "Git repository must be properly initialized and accessible",
    "branchTypeValid": "Branch type must be correctly identified and authority established",
    "databaseIntegrity": "Database must be properly initialized with complete schema"
  }
}