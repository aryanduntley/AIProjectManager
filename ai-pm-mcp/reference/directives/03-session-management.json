{
  "metadata": {
    "id": "03-session-management",
    "title": "Work Period Management Directives",
    "priority": "high",
    "frequency": "work-period-start",
    "version": "1.1.0",
    "humanReadable": "reference/directivesmd/03-session-management.md"
  },
  "triggers": [
    "Work period start",
    "Continue development", 
    "Task resumption",
    "New work period initialization",
    "Work period boot",
    "Git changes detected during boot",
    "Context restoration needed",
    "High-priority item detection during boot",
    "Scope-escalated issue surfacing"
  ],
  "workflows": {
    "workPeriodBootProtocol": {
      "directive": "Follow exact sequence when starting new work periods or 'continue development'",
      "prerequisites": "This assumes automatic state detection (from 01-system-initialization) has already notified the user and they have chosen to proceed with work period initialization",
      "coreRequirements": [
        "Initialize database connection and restore work context from project.db",
        "Check initialization status and resume incomplete initialization if needed",
        "Load projectManagement/ProjectBlueprint/blueprint.md",
        "Load projectManagement/ProjectFlow/flow-index.json and selective flow files",
        "Load projectManagement/ProjectLogic/projectlogic.jsonl", 
        "Load projectManagement/Tasks/completion-path.json + implementation plan status from database",
        "Load recent noteworthy events from database (instead of file scanning)",
        "Check for high-priority items (HIGH-TASK files, H- plans, database events)",
        "Surface high-priority items prominently if found",
        "Restore active themes, tasks, sidequests from work context database",
        "Check projectManagement/Implementations/active/{activeImplementationPlan.md}",
        "Query database for current task/sidequest status and analytics",
        "Load current implementation plan context and phase progress from database",
        "Load file metadata context for intelligent context decisions",
        "Ensure proposed updates are confirmed by user before changing anything"
      ],
      "detailedBootSequence": [
        "1. Identify branch type (ai-pm-org-main vs work branch) and establish authority",
        "2. Initialize database connection and restore work context from project.db",
        "2a. Check initialization_phase in work tracking table - if incomplete, offer to resume initialization",
        "2b. If initialization incomplete, load unanalyzed files using get_unanalyzed_files() method",
        "2c. Present initialization progress and offer resumption options to user",
        "3. [AI-PM-ORG-MAIN ONLY] Detect Git changes and perform organizational reconciliation if needed",
        "4. Read ProjectBlueprint for project understanding",  
        "5. Read ProjectFlow (flow-index.json) for interaction understanding",
        "6. Read projectlogic.jsonl for reasoning history",
        "7. Load completion-path.json + implementation plan status from database",
        "8. Restore active themes, tasks, sidequests from work context database",
        "9. Load recent noteworthy events from database (instead of file scanning)",
        "9a. Check for high-priority items (HIGH-TASK files, H- plans, database events)",
        "9b. Surface high-priority items prominently if found, recommend immediate attention",
        "10. Assess current state using database task/sidequest status queries",
        "11. Load file metadata context using database file_metadata table for intelligent context decisions",
        "12. Determine next steps with priority suggestions based on database analytics",
        "13. Get user approval for direction",
        "14. Determine/restore context mode from work period database",
        "15. Generate/restore task context using database theme-flow relationships and file metadata",
        "16. Begin task execution with preserved work state"
      ],
      "statePreservationProtocol": {
        "directive": "MANDATORY FOR WORK CONTINUITY: Database-enhanced boot sequence requires STRICT adherence to real-time state updates",
        "everyWorkUnitCompletion": [
          "1. Immediate Database Update: Task/subtask status, progress, completion timestamps",
          "2. File Synchronization: Update corresponding task files with current state",
          "3. Context Snapshot: Save current AI context to work period database",
          "4. Event Logging: Record completion for analytics and work restoration",
          "5. Atomic Operation: All updates must succeed or entire completion fails"
        ],
        "workRestorationGuarantee": "AI must be able to resume from ANY point where work was interrupted, with complete context restoration and zero work loss",
        "implementationRequirement": "Every MCP tool that modifies project state must implement this update protocol before considering any work unit complete"
      },
      "taskManagementLogic": {
        "autoTaskCreationTrue": {
          "noIncompleteTasksAndCurrentImplementationPlan": [
            "assess state and create next tasks",
            "summarize tasks for user and create new task file"
          ],
          "noIncompleteTasksAndNoImplementationPlan": [
            "review all statuses, review projectManagement/Tasks/completion-path.json",
            "assess state, summarize to user state and indicate ready for next implementation plan",
            "if approved, archive complete implementation plan if not already",
            "generate new implementation plan, generate new task file",
            "summarize tasks, ask user to start",
            "if not approved, await further instructions"
          ]
        },
        "autoTaskCreationFalse": {
          "noIncompleteTasksAndCurrentImplementationPlan": [
            "assess state and summarize tasks for user",
            "await approval"
          ],
          "noIncompleteTasksAndNoImplementationPlan": [
            "review all statuses, review projectManagement/Tasks/completion-path.json",
            "assess state, summarize to user state and indicate ready for next implementation plan",
            "if approved, archive complete implementation plan if not already",
            "generate new implementation plan",
            "assess state and next tasks, summarize tasks, ask user if ready to create next task file",
            "if approved create new task file, ask user if ready to begin tasks",
            "if not approved, await further instruction"
          ]
        }
      },
      "bootSequence": [
        {
          "step": 1,
          "action": "readProjectBlueprint",
          "file": "ProjectBlueprint/blueprint.md",
          "purpose": "project understanding"
        },
        {
          "step": 2,
          "action": "readProjectFlow",
          "file": "ProjectFlow/flow-index.json",
          "purpose": "interaction understanding"
        },
        {
          "step": 3,
          "action": "readProjectLogic",
          "file": "ProjectLogic/projectlogic.jsonl",
          "purpose": "reasoning history"
        },
        {
          "step": 4,
          "action": "readCompletionPath",
          "file": "Tasks/completion-path.json",
          "purpose": "current objectives"
        },
        {
          "step": 5,
          "action": "checkImplementationPlan",
          "directory": "Implementations/active/",
          "purpose": "current implementation plan context"
        },
        {
          "step": 6,
          "action": "checkNoteworthyContext",
          "file": "Logs/noteworthy.json",
          "purpose": "latest noteworthy data"
        },
        {
          "step": 7,
          "action": "reviewActiveTasks",
          "directory": "Tasks/active/",
          "purpose": "incomplete tasks"
        },
        {
          "step": 8,
          "action": "reviewLastCompletedTasks",
          "directory": "Tasks/archive/",
          "condition": "no active tasks",
          "purpose": "context for next steps"
        },
        {
          "step": 9,
          "action": "determineNextSteps",
          "purpose": "priority suggestions"
        },
        {
          "step": 10,
          "action": "getUserApproval",
          "purpose": "direction confirmation"
        },
        {
          "step": 11,
          "action": "determineContextMode",
          "purpose": "based on selected work"
        },
        {
          "step": 12,
          "action": "generateTaskList",
          "purpose": "approved direction"
        },
        {
          "step": 13,
          "action": "loadThemeContext",
          "purpose": "selected tasks"
        },
        {
          "step": 14,
          "action": "beginTaskExecution",
          "purpose": "start work"
        }
      ]
    },
    "taskManagementLogic": {
      "directive": "Handle task resumption based on configuration",
      "detailedProcess": [
        "1. Check for active/incomplete tasks in Tasks/active/ directory",
        "2. Load configuration setting: tasks.resumeTasksOnStart (default: false)",
        "3. If active/incomplete tasks found:",
        "   a. If resumeTasksOnStart = true: automatically resume active tasks, load appropriate context for task continuation, begin task execution with full context",
        "   b. If resumeTasksOnStart = false: list all incomplete tasks with status and descriptions, present user with clear options, wait for user decision before proceeding",
        "4. If no active tasks found: read last completed tasks from Tasks/archive/, compare last completed tasks to completion-path.json, identify next milestone or implementation plan phase, check for active implementation plan in Implementations/active/, if no implementation plan, analyze next milestone for plan creation"
      ],
      "userPromptFormat": "I found the following incomplete tasks:\n- TASK-ID: Description (status: in-progress)\n- TASK-ID: Description (status: pending)\n\nWould you like to resume these tasks or start with a new objective?",
      "steps": [
        {
          "action": "checkActiveIncompleteTasks",
          "directory": "Tasks/active/",
          "required": true
        },
        {
          "action": "loadConfiguration",
          "setting": "tasks.resumeTasksOnStart",
          "default": false,
          "required": true
        },
        {
          "action": "handleActiveTasksFound",
          "condition": "active/incomplete tasks found",
          "branches": {
            "resumeTasksOnStartTrue": {
              "actions": [
                "automatically resume active tasks",
                "load appropriate context for task continuation",
                "begin task execution with full context"
              ]
            },
            "resumeTasksOnStartFalse": {
              "actions": [
                "list all incomplete tasks with status and descriptions",
                "present user with clear options",
                "wait for user decision before proceeding"
              ],
              "userPromptFormat": "I found the following incomplete tasks:\n- TASK-ID: Description (status: in-progress)\n- TASK-ID: Description (status: pending)\n\nWould you like to resume these tasks or start with a new objective?"
            }
          }
        },
        {
          "action": "handleNoActiveTasks",
          "condition": "no active tasks found",
          "steps": [
            "read last completed tasks from Tasks/archive/",
            "compare last completed tasks to completion-path.json",
            "identify next milestone or implementation plan phase",
            "check for active implementation plan in Implementations/active/",
            "if no implementation plan, analyze next milestone for plan creation"
          ]
        }
      ]
    },
    "implementationPlanIntegration": {
      "directive": "Integrate implementation plans into work period management",
      "components": {
        "activeImplementationPlan": "If exists, load current phase and progress",
        "phaseContext": "Understanding of current implementation phase and objectives",
        "taskGeneration": "Create tasks based on current implementation plan phase",
        "strategicContinuity": "Maintain implementation strategy across work periods",
        "noImplementationPlan": "If no active plan, analyze next milestone and create implementation plan"
      }
    },
    "taskCompletionUpdates": {
      "directive": "Follow systematic update process after task completion",
      "detailedProcess": [
        "1. Review completed task or sidequest file",
        "2. If sidequest, review and update task file if needed",
        "3. Review projectManagement/Tasks/completion-path.json update if needed",
        "4. Review implementation plan update if needed, archive if needed",
        "5. Review flow-index and flow files update if needed",
        "6. Make any noteworthy notes to noteworthy.json (if needed, do not feel obligated to add things here)"
      ],
      "sidequestCompletion": [
        "Archive sidequest file"
      ],
      "taskFileCompletion": [
        "Ensure no fragmented sidequests",
        "If fragments exist, review and complete sidequests",
        "If issues arise, handle normally, involve user in decisions on how to proceed",
        "Once complete review fragmented sidequest file",
        "Review projectManagement/Tasks/completion-path.json update if needed",
        "Review implementation plan update if needed, archive if needed",
        "Review flow-index and flow files update if needed",
        "Make any noteworthy notes to noteworthy.json (if needed, do not feel obligated to add things here)",
        "Archive fragmented sidequest files",
        "Archive task file"
      ]
    },
    "userDiscussionAssessments": {
      "directive": "Handle user discussions that may impact project organization",
      "detailedTriggers": [
        "Discussion about flow, logic, structure, dependencies, enhancements, refactoring, UI, coding practice, etc.",
        "Things that could change the project blueprint",
        "Things that could change the way the themes are defined or the files they may relate to",
        "Things that could change the logic or understanding of the project as a whole",
        "Things that could change the logic of a certain aspect of the project",
        "Decision about the workings of any part of the project"
      ],
      "orderedUpdateProcess": [
        "1. Review blueprint update if needed",
        "2. Review metadata update if needed",
        "3. Review projectlogic, update if needed",
        "4. Review themes.json update if needed",
        "5. Review theme files in Themes, update if needed according to themes.json, theme files must always match themes.json",
        "6. Review projectManagement/Tasks/completion-path.json update if needed",
        "7. Review implementation plan update if needed, archive if needed",
        "8. Review flow-index and flow files update if needed",
        "9. Make any noteworthy notes to noteworthy.json (if needed, do not feel obligated to add things here)"
      ],
      "approvalRequirement": "All changes to these files EXCEPT noteworthy and projectlogic, must be explicitly approved by the user. For projectlogic, since it's a historical record, make a generalized summary of changes made to projectlogic based on recent discussion.",
      "updateProcess": [
        {
          "action": "reviewBlueprintUpdate",
          "userApprovalRequired": true,
          "condition": "if needed"
        },
        {
          "action": "reviewMetadataUpdate",
          "userApprovalRequired": true,
          "condition": "if needed"
        },
        {
          "action": "reviewProjectlogicUpdate",
          "userApprovalRequired": false,
          "condition": "if needed",
          "note": "Make generalized summary of changes based on recent discussion"
        },
        {
          "action": "reviewThemesJsonUpdate",
          "userApprovalRequired": true,
          "condition": "if needed"
        },
        {
          "action": "reviewThemeFilesUpdate",
          "userApprovalRequired": true,
          "condition": "if needed",
          "requirement": "theme files must always match themes.json"
        },
        {
          "action": "reviewCompletionPathUpdate",
          "userApprovalRequired": true,
          "condition": "if needed"
        },
        {
          "action": "reviewImplementationPlanUpdate",
          "userApprovalRequired": true,
          "condition": "if needed",
          "note": "archive if needed"
        },
        {
          "action": "reviewFlowIndexAndFlowFilesUpdate",
          "userApprovalRequired": true,
          "condition": "if needed"
        },
        {
          "action": "makeNoteworthyNotes",
          "userApprovalRequired": false,
          "condition": "if needed",
          "note": "do not feel obligated to add things here"
        }
      ]
    }
  },
  "configSettings": {
    "tasks.resumeTasksOnStart": {
      "default": false,
      "type": "boolean",
      "description": "Automatically resume active tasks on session start"
    },
    "tasks.autoTaskCreation": {
      "default": false,
      "type": "boolean",
      "description": "Automatically create tasks without user approval"
    }
  },
  "integrations": [
    "06-task-management",
    "07-implementation-plans",
    "08-project-management",
    "12-user-interaction"
  ],
  "dependencies": [
    "ProjectBlueprint/blueprint.md",
    "ProjectFlow/flow-index.json",
    "ProjectLogic/projectlogic.jsonl",
    "Tasks/completion-path.json",
    "Implementations/active/",
    "Tasks/active/",
    "Logs/noteworthy.json"
  ],
  "keyOperations": [
    "Context loading",
    "Task resumption", 
    "State preservation",
    "Implementation plan integration",
    "High-priority boot detection",
    "Initialization progress checking",
    "File metadata context loading",
    "Database session restoration",
    "Organizational file updates"
  ],
  "workStateManagement": {
    "directive": "Maintain work state through persistent project files and database",
    "stateTracking": {
      "activeTasks": "Tasks/active/ directory",
      "projectProgress": "Tasks/completion-path.json",
      "implementationPlans": "Implementations/active/",
      "recentDecisions": "ProjectLogic/projectlogic.jsonl",
      "noteworthyItems": "Logs/noteworthy.json",
      "workContext": "work activities tracking in project.db", 
      "initializationProgress": "initialization_phase and progress tracking in database",
      "fileMetadata": "file_metadata table for context intelligence"
    },
    "workContextRecovery": {
      "bootSequence": "loads all relevant project files and database context",
      "activeTasks": "provide immediate context",
      "projectLogic": "maintains reasoning history",
      "implementationPlans": "track current objectives", 
      "databaseContext": "restores complete work state including initialization progress",
      "fileMetadata": "enables intelligent context loading decisions"
    }
  },
  "workContinuityRequirements": {
    "directive": "Ensure seamless transitions between work periods",
    "statePreservation": [
      "All work states saved in appropriate files and database",
      "Context loading can recreate working environment",
      "Task dependencies and relationships maintained",
      "User preferences and decisions preserved",
      "Project logic evolution tracked",
      "Initialization progress preserved in database",
      "File metadata context preserved for intelligent decisions"
    ],
    "recoveryCapabilities": [
      "Can resume from any interruption point including incomplete initialization",
      "Previous work state fully recoverable from database",
      "Context can be recreated from saved state and file metadata", 
      "Task progress maintained across work periods",
      "Initialization progress resumption from exact point of interruption"  
    ]
  },
  "highPriorityBootDetection": {
    "directive": "Detect and surface high-priority items during session boot to ensure immediate attention",
    "purpose": "Automatically surface scope-escalated issues that require user attention during work period initialization",
    "required": true,
    "detectionProcess": [
      "Scan Tasks/active/ directory for HIGH-TASK-*.json files",
      "Scan Implementations/active/ directory for H-*.md implementation plans",
      "Query database for events with exist_high_priority=true and requires_escalation=true",
      "Check most relevant noteworthy events from recent sessions for unresolved high-priority items"
    ],
    "surfacingProtocol": {
      "highPriorityFound": [
        "Display high-priority items prominently at start of boot sequence",
        "Present clear summary: 'High-priority items detected that require attention:'",
        "List each HIGH-TASK file with title and brief description",
        "List each H- implementation plan with title and escalation reason",
        "List relevant database events with timestamps and impact assessment",
        "Recommend addressing high-priority items before regular work continuation"
      ],
      "userOptions": [
        "Address high-priority items immediately",
        "Continue with regular boot and address high-priority items after context loading",
        "Review high-priority items in detail before deciding on approach"
      ]
    },
    "integrationWithBoot": {
      "earlyDetection": "High-priority detection occurs after database connection but before regular task assessment",
      "contextPreservation": "If user chooses to address high-priority items, preserve regular boot context for later resumption",
      "priorityWorkflow": "High-priority work follows same context loading and execution patterns as regular tasks"
    },
    "relevanceBasedQuerying": {
      "resultLimiting": "Limit high-priority queries to 5 most relevant results ordered by session context and recency",
      "sessionPriority": "Prioritize items from last meaningful work session over arbitrary time windows",
      "configurableParams": "Allow users to configure result limits and lookback preferences via .ai-pm-config.json",
      "performanceOptimization": "Use efficient database queries with result limits and relevance ordering",
      "hybridApproach": "Combine recent items (if any exist within reasonable timeframe) with last session context"
    }
  },
  "basicEdgeCaseHandling": {
    "directive": "Handle common work period management edge cases with basic recovery procedures",
    "commonEdgeCases": {
      "corruptedFiles": {
        "basicResponse": "Notify user: 'Project file [FILE] appears corrupted. Options: [1] Restore from backup [2] Rebuild from database [3] Request manual repair'",
        "escalationTrigger": "IF corruption complex or affects multiple files → ESCALATE to reference/directivesmd/03-session-management.md for comprehensive recovery procedures"
      },
      "databaseConnectionFailed": {
        "basicResponse": "Inform user: 'Database unavailable. Running in file-only mode with limited work persistence.'",
        "escalationTrigger": "IF database issues persist or affect critical workflows → ESCALATE for detailed database troubleshooting procedures"
      },
      "workRestorationFailed": {
        "basicResponse": "Alert user: 'Unable to restore previous work period fully. Options: [1] Start fresh [2] Partial recovery [3] Manual context reconstruction'",
        "escalationTrigger": "IF restoration failure affects active work → ESCALATE for comprehensive work recovery protocols"
      },
      "conflictingTaskStates": {
        "basicResponse": "Warning: 'Inconsistent task states detected. Options: [1] Use database version [2] Use file version [3] Manual resolution'",
        "escalationTrigger": "IF task state inconsistencies affect multiple tasks or critical workflows → ESCALATE for detailed state synchronization procedures"
      }
    },
    "generalEscalationTrigger": "WHEN edge case handling unclear or insufficient → ESCALATE to reference/directivesmd/03-session-management.md for comprehensive edge case protocols"
  }
}