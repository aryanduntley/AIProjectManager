{
  "metadata": {
    "id": "08-project-management",
    "title": "Project Management Directives",
    "priority": "critical",
    "frequency": "ongoing",
    "version": "1.0.0",
    "humanReadable": "reference/directivesmd/08-project-management.md"
  },
  "triggers": [
    "Project initialization",
    "Blueprint changes",
    "Flow modifications",
    "Logic updates"
  ],
  "workflows": {
    "organizationalFileSynchronization": {
      "directive": "MANDATORY: All organizational files and their corresponding database records MUST be kept in perfect synchronization at all times",
      "triggers": [
        "After every subtask completion",
        "After every significant step in any work unit",
        "Before session termination (automatic)",
        "After any structural changes to project organization",
        "After any user-approved modifications"
      ],
      "filesSynchronized": [
        "ProjectBlueprint/blueprint.md ↔ Project metadata in database",
        "ProjectFlow/*.json ↔ flow_status and flow_step_status tables",
        "ProjectLogic/projectlogic.jsonl ↔ noteworthy_events table",
        "Tasks/active/*.json ↔ task_status, subtask_status, sidequest_status tables",
        "Implementations/active/*.md ↔ Implementation progress in database",
        "Themes/*.json ↔ theme_flows table"
      ],
      "sessionRestorationGuarantee": "Upon restart, AI must be able to continue exactly where previous session ended, with complete understanding of project state, current work context, and next steps"
    },
    "projectInitialization": {
      "directive": "Follow exact sequence when initializing projects",
      "sequence": [
        "Validate project path exists and is accessible",
        "Check for existing projectManagement/ structure",
        "If exists, run compatibility check",
        "Initialize database: Create project.db from ai-pm-mcp/database/schema.sql",
        "Create complete directory structure",
        "Initialize all required files with proper templates",
        "Initialize database with default session and project metadata",
        "Set appropriate metadata (creation date, version, etc.)",
        "Confirm successful initialization and database connectivity"
      ],
      "directoryStructure": [
        "ProjectBlueprint/",
        "ProjectFlow/",
        "ProjectLogic/",
        "Themes/",
        "Tasks/{active,sidequests,archive/{tasks,sidequests}}",
        "Implementations/{active,completed}",
        "Logs/{current,archived,compressed}",
        "Placeholders/",
        ".ai-pm-config.json (branch-protected configuration)"
      ]
    },
    "blueprintManagement": {
      "directive": "ProjectBlueprint is the single source of truth for project purpose and scope",
      "rules": [
        "Blueprint must be user-approved before any development begins",
        "Changes to blueprint require explicit user confirmation",
        "Blueprint must be plain language, not technical specifications",
        "Always reference that detailed scope information is in Themes/",
        "Update blueprint metadata on any changes",
        "Blueprint should be 1-3 pages maximum for clarity"
      ],
      "requiredContent": [
        "Project overview and purpose",
        "Key features and scope",
        "Success criteria",
        "Constraints and limitations",
        "References to detailed technical specifications in themes"
      ]
    },
    "multiFlowDocumentation": {
      "directive": "ProjectFlow/ directory must contain organized flow files managed through a master flow index",
      "multiFlowStructure": {
        "masterFlowIndex": {
          "file": "flow-index.json",
          "purpose": "Lists all flow files with dependencies and metadata",
          "functions": [
            "Manages cross-flow dependencies for complex user journeys",
            "Enables selective loading of relevant flow files based on task context",
            "Provides project-wide flow coordination and validation"
          ]
        },
        "individualFlowFiles": {
          "pattern": "*-flow.json",
          "purpose": "Domain-specific flows organized by theme",
          "namingConvention": "{domain}-flow.json (e.g., authentication-flow.json, payment-flow.json)",
          "format": "JSON format for machine readability and AI processing",
          "crossFlowReferences": "Must specify both flowId and flowFile"
        },
        "selectiveLoading": "AI loads only relevant flow files based on task context",
        "flowFileLimits": "Configurable via contextLoading.maxFlowFiles (default: 3)"
      },
      "flowScopeProtocol": {
        "directive": "Flow scope is a performance optimization, not a limitation. Theme scope is always available.",
        "flowScope": {
          "purpose": "Initial context loading for resource management and performance optimization",
          "usage": "Start with flow scope, expand to theme scope when needed"
        },
        "themeScope": {
          "purpose": "Always available as the defined scope boundary for complete context",
          "accessibility": "No restrictions - always available for complete context"
        },
        "automaticExpansion": "AI can expand from flow scope to theme scope without user approval",
        "resourceManagement": "Performance optimization without limiting AI capabilities",
        "selfImplemented": "AI determines when flow scope is insufficient and expands automatically"
      },
      "structureRequirements": [
        "Each flow must specify: trigger, steps, file trails, conditions, outcomes",
        "Files can be marked as null, pending, or not-implemented",
        "Cross-reference with theme files for implementation details",
        "Cross-flow references must specify both flowId and flowFile",
        "Update flows when new features or interactions are added"
      ],
      "enhancedFlowManagement": {
        "flowLevelStatusTracking": {
          "overallStatus": ["pending", "in-progress", "complete", "needs-review"],
          "completionPercentage": "Calculated from individual step completion status",
          "milestoneIntegration": "Integration with completion path milestones for validation"
        },
        "stepLevelStatusTracking": {
          "individualStatus": ["pending", "in-progress", "complete", "needs-analyze", "blocked"],
          "stepDependencies": "Clear dependency chain ensuring logical implementation order",
          "completionTimestamps": "Date/time tracking for completed steps",
          "fileReferences": "Implementation status for each referenced file"
        },
        "statusTransitionRules": [
          "Steps cannot move to in-progress until dependencies are complete",
          "Flow marked complete only when all steps are complete",
          "Milestone completion requires all required flows to be complete",
          "Quality gates may require validation checkpoints"
        ],
        "completionPathIntegration": {
          "requiredFlows": "Milestones specify required flows and target completion status",
          "progressValidation": "Real-time validation of flow completion against milestone requirements",
          "blockingLogic": "Milestones cannot be completed until required flows reach specified status",
          "progressTracking": "Milestone progress calculated from flow completion percentages"
        },
        "implementationPlanAlignment": {
          "flowRequirements": "Implementation plans specify which flows must be completed",
          "phaseMapping": "Implementation plan phases aligned with flow step completion",
          "progressSynchronization": "Flow progress updates reflected in implementation plan status",
          "completionValidation": "Implementation plan phases cannot complete without flow validation"
        }
      }
    },
    "logicTracking": {
      "directive": "ProjectLogic/projectlogic.jsonl tracks evolving project reasoning and decisions",
      "entryRequirements": [
        "Timestamp and session ID",
        "Decision type and reasoning",
        "Impact on project direction",
        "User interactions and approvals",
        "Logic changes and their rationale"
      ],
      "updateTriggers": [
        "Major architecture decisions",
        "Theme modifications",
        "Flow changes",
        "User-requested direction changes",
        "Significant technical pivots"
      ],
      "relationshipToCore": {
        "blueprint.md": "Plain-language, high-level purpose and summary",
        "flow-index.json": "Master index for user experience flows across multiple flow files with multi-flow coordination",
        "projectlogic.jsonl": "Compact AI/user logic map, state transitions, reasoning"
      }
    },
    "templatesAndExamples": {
      "directive": "Provide consistent, centralized template system for all organizational file creation",
      "templateSource": "reference/templates/ directory in MCP server repository",
      "availableTemplates": [
        "completion-path.json",
        "flow-index.json",
        "authentication-flow.json",
        "task-active.json",
        "sidequest.json",
        "implementation-plan-template.md",
        "projectlogic.jsonl",
        "noteworthy.json",
        "config.json",
        "themes.json",
        "todos.jsonl",
        "README-template.md",
        "README-template.json"
      ],
      "usageDirective": [
        "AI must use corresponding example file as template structure",
        "All organizational files must follow example patterns",
        "Templates include all interconnection requirements",
        "User approval required for content"
      ]
    }
  },
  "configSettings": {
    "projectManagement.autoInit": {
      "default": true,
      "type": "boolean",
      "description": "Automatically initialize project management structure"
    },
    "projectManagement.blueprintRequired": {
      "default": true,
      "type": "boolean",
      "description": "Require approved blueprint before development"
    },
    "projectManagement.flowValidation": {
      "default": true,
      "type": "boolean",
      "description": "Validate flow completeness against milestones"
    },
    "contextLoading.maxFlowFiles": {
      "default": 20,
      "type": "integer",
      "description": "Maximum number of flow files to load in multi-flow context"
    },
    "validation.requireApprovalForStructureChanges": {
      "default": true,
      "type": "boolean",
      "description": "Require user approval for structural changes to project organization"
    }
  },
  "integrations": [
    "01-system-initialization",
    "02-project-initialization",
    "07-implementation-plans",
    "09-logging-documentation"
  ],
  "dependencies": [
    "ProjectBlueprint/",
    "ProjectFlow/",
    "ProjectLogic/",
    "reference/templates/ directory",
    ".ai-pm-config.json (branch-protected configuration)"
  ],
  "keyOperations": [
    "Project initialization",
    "Blueprint management",
    "Flow documentation",
    "Logic tracking"
  ],
  "coreIntelligenceFiles": {
    "blueprint.md": {
      "purpose": "Plain-language, high-level purpose and summary of the project",
      "format": "Markdown",
      "audience": "User",
      "evaluation": "Before and after every task file"
    },
    "flow-index.json": {
      "purpose": "Master index for user experience flows, interactions, and interface journeys across multiple flow files",
      "format": "JSON",
      "audience": "User flow modeling and multi-flow coordination",
      "evaluation": "When functionality or design logic changes",
      "distinction": "User experience paths (action, outcome, etc) distinct from themes (programmatic paths and file linkage)",
      "multiFlowCapabilities": [
        "Cross-flow dependency management",
        "Selective flow loading for performance",
        "Flow completion tracking",
        "Milestone integration validation"
      ]
    },
    "projectlogic.jsonl": {
      "purpose": "Compact AI/user logic map, state transitions, reasoning, and direction shifts",
      "format": "JSONL",
      "audience": "AI decision tracking",
      "evaluation": "Before task execution to ensure current logic availability"
    }
  },
  "evaluationSchedule": {
    "triggers": [
      "Before and after every task file (not per subtask)",
      "When project functionality or design logic changes",
      "Before task execution to ensure current logic is available",
      "After task completion to verify direction/theme/design shifts"
    ],
    "requirements": [
      "All entries include timestamp, category/type, affected components",
      "AI presents human-readable summaries before writing",
      "Maintain alignment between all three core files"
    ]
  },
  "templateIntegration": {
    "flowIntegration": "Templates include flow status tracking and milestone integration",
    "implementationPlanIntegration": "Templates reference implementation plan system",
    "themeIntegration": "Templates include theme context and dependencies",
    "statusTracking": "Templates include appropriate status fields and validation"
  }
}