{
  "metadata": {
    "id": "02-project-initialization",
    "title": "Project Initialization Directives",
    "priority": "critical",
    "frequency": "project-start",
    "version": "1.0.0",
    "humanReadable": "reference/directivesmd/02-project-initialization.md"
  },
  "triggers": [
    "New project creation",
    "Existing project analysis", 
    "First project setup",
    "/init command execution"
  ],
  "initCommandHandling": {
    "statusCheckRequired": "CRITICAL: Always check project state before proceeding with any initialization",
    "behaviorByState": {
      "complete": {
        "action": "block_initialization",
        "message": "Project already has AI Project Manager fully set up and running",
        "suggestions": [
          "Use /resume to continue previous work",
          "Use /tasks to see current work items", 
          "Use /status to check project status",
          "Use /branch to create work branch"
        ],
        "forceReinitInstructions": "If user really wants to re-initialize, instruct to backup existing projectManagement/ directory first"
      },
      "partial": {
        "action": "complete_initialization",
        "message": "Continuing incomplete initialization",
        "workflow": "existingProject"
      },
      "no_structure": {
        "action": "full_initialization", 
        "message": "Setting up AI project management from scratch",
        "workflow": "newProject"
      },
      "git_history_found": {
        "action": "team_member_setup",
        "message": "Detected existing AI project management, setting up for team collaboration",
        "workflow": "teamMemberJoin"
      }
    },
    "userCommunication": {
      "blockMessage": "# ‚ÑπÔ∏è Project Already Initialized\n\n## Current Status:\n[Project state details]\n\n## üîÑ Did you mean `/resume`?\n\nThis project appears to already have AI Project Manager fully set up and running.",
      "suggestionFormat": "**If you want to:**\n- **Continue previous work** ‚Üí Use `/resume`\n- **See current tasks** ‚Üí Use `/tasks`\n- **Check project status** ‚Üí Use `/status`\n- **Create work branch** ‚Üí Use `/branch`"
    }
  },
  "workflows": {
    "newProject": {
      "directive": "Discuss with user goals of project. Be as detailed as needed to fulfil the goals and needs of the organization files",
      "userApprovalRequired": true,
      "steps": [
        {
          "action": "createProjectBlueprint",
          "description": "Create project blueprint after gathering information",
          "required": true,
          "substeps": [
            "Create metadata.json with project characteristics",
            "Ensure blueprint is assessed and approved by user"
          ]
        },
        {
          "action": "projectFlowDiscussion",
          "description": "Discuss project flow with user",
          "required": true,
          "substeps": [
            "Discuss user interactions with software parts",
            "Discuss outcomes of user actions",
            "Outline user flows and steps in flow-index.json and individual flow files"
          ]
        },
        {
          "action": "projectLogicDevelopment",
          "description": "Develop project logic understanding",
          "required": true,
          "substeps": [
            "Know logic of how and why for project parts",
            "Track logic and reasoning from user discussion",
            "Record in projectlogic as project progresses",
            "Update metadata.json when logic reveals new characteristics"
          ]
        },
        {
          "action": "themeAssessment",
          "description": "Assess and create themes",
          "required": true,
          "userApprovalRequired": true,
          "substeps": [
            "Outline starting point of themes",
            "Create assessment based on blueprint, flow, and logic",
            "Present assessment to user for approval",
            "Generate theme files after approval",
            "Update metadata.json during theme discovery",
            "Create todos for missing data and log in todos.jsonl"
          ]
        },
        {
          "action": "completionPathDefinition",
          "description": "Define completion path",
          "required": true,
          "userApprovalRequired": true,
          "substeps": [
            "Outline completion path after themes generated",
            "Get user approval of completion path"
          ]
        },
        {
          "action": "implementationPlanAndScaffolding",
          "description": "Generate implementation plan for scaffolding",
          "required": true,
          "userApprovalRequired": "conditional",
          "condition": "autoTaskCreation is false",
          "substeps": [
            "Generate first implementation plan for scaffolding",
            "Include README.md for every directory and update database with directory metadata",
            "Update README files as changes are made"
          ]
        },
        {
          "action": "taskGeneration",
          "description": "Generate first task file",
          "required": true,
          "userApprovalRequired": "conditional",
          "condition": "autoTaskCreation is false",
          "substeps": [
            "Generate first task file with implementation plan"
          ]
        },
        {
          "action": "projectExecution",
          "description": "Begin project execution",
          "required": true,
          "substeps": [
            "Handle task execution as normal",
            "Evolve organizational files as needed",
            "Update blueprint metadata during scaffolding",
            "Manage todos through tasks"
          ]
        },
        {
          "action": "scaffoldingCompletion",
          "description": "Complete scaffolding phase",
          "required": true,
          "substeps": [
            "Review todos for file references needed for themes",
            "Review other core organizational files"
          ]
        }
      ]
    },
    "existingProject": {
      "directive": "Analyze existing project and create organization structure",
      "userApprovalRequired": true,
      "steps": [
        {
          "action": "createProjectBlueprint",
          "description": "Create project blueprint after gathering information",
          "required": true,
          "substeps": [
            "Create metadata.json with project characteristics",
            "Ensure blueprint is assessed and approved by user"
          ]
        },
        {
          "action": "projectFlowDiscussion",
          "description": "Discuss project flow with user",
          "required": true,
          "substeps": [
            "Discuss user interactions with software parts",
            "Discuss outcomes of user actions",
            "Outline user flows and steps in flow-index.json and individual flow files"
          ]
        },
        {
          "action": "projectLogicDevelopment",
          "description": "Develop project logic understanding",
          "required": true,
          "substeps": [
            "Know logic of how and why for project parts",
            "Track logic and reasoning from user discussion",
            "Record in projectlogic as project progresses",
            "Update metadata.json when logic reveals new characteristics"
          ]
        },
        {
          "action": "themeAssessment",
          "description": "Assess and create themes",
          "required": true,
          "userApprovalRequired": true,
          "substeps": [
            "Outline starting point of themes",
            "Create assessment based on blueprint, flow, and logic",
            "Present assessment to user for approval",
            "Generate theme files after approval",
            "Update metadata.json during theme discovery",
            "Create todos for missing data and log in todos.jsonl"
          ]
        },
        {
          "action": "projectEvaluation",
          "description": "Evaluate entire project",
          "required": true,
          "userApprovalRequired": true,
          "warning": "Resource intensive process",
          "substeps": [
            "Ask user if ready to begin (may take a while)",
            "Review infrastructure upon approval",
            "Update core organizational files and metadata"
          ]
        },
        {
          "action": "projectFolderAnalysis",
          "description": "Analyze project folders",
          "required": true,
          "substeps": [
            "Evaluate project folders",
            "Assess project size for reading strategy",
            "Determine aggressiveness of file reading based on size",
            "Warn user about resource intensity"
          ]
        },
        {
          "action": "fileMetadataInitialization",
          "description": "Initialize comprehensive file-by-file tracking system",
          "required": true,
          "substeps": [
            "Start initialization phase in sessions table with initialization_phase='discovering_files'",
            "Discover all project files and populate file_metadata table with basic information",
            "Track total_files_discovered count in sessions table for progress monitoring",
            "Set initialization_phase='analyzing_themes' after file discovery complete"
          ]
        },
        {
          "action": "directoryByDirectoryAssessment",
          "description": "Assess each directory systematically with database-driven progress tracking",
          "required": true,
          "recursive": true,
          "substeps": [
            "Read files in each directory one by one using batch processing (50 files per batch)",
            "Avoid dependency folders (deps, node_modules, git, etc.)",
            "Create/update README.md file in directory",
            "Update file_metadata table with analysis results: file_purpose, file_description, important_exports, dependencies",
            "Mark files as analyzed with initialization_analyzed=TRUE in database",
            "Store theme associations in theme_associations field of file_metadata",
            "Update organizational files with new information",
            "Discuss theme updates with user for approval",
            "Discuss blueprint updates with user for approval",
            "Discuss logic amendments with user for approval",
            "Log noteworthy information",
            "Automatically update files_processed count via database triggers"
          ]
        },
        {
          "action": "flowAssociationBuilding",
          "description": "Build flow associations and complete initialization tracking",
          "required": true,
          "substeps": [
            "Set initialization_phase='building_flows' in sessions table",
            "Update flow_references field in file_metadata for files referenced by flows",
            "Complete flow association mapping between themes and flows"
          ]
        },
        {
          "action": "finalReviewAndCompletion",
          "description": "Final review of core files and complete initialization",
          "required": true,
          "substeps": [
            "Review core files for consistency and accuracy",
            "Set initialization_phase='complete' and initialization_completed_at timestamp in sessions table",
            "Verify all files are marked with initialization_analyzed=TRUE",
            "Confirm initialization is complete with 100% progress"
          ]
        },
        {
          "action": "implementationPlanGeneration",
          "description": "Generate first implementation plan",
          "required": true,
          "userApprovalRequired": "conditional",
          "condition": "autoTaskCreation is false"
        },
        {
          "action": "taskGeneration",
          "description": "Generate first task file",
          "required": true,
          "userApprovalRequired": "conditional",
          "condition": "autoTaskCreation is false"
        },
        {
          "action": "projectExecution",
          "description": "Begin project execution",
          "required": true,
          "substeps": [
            "Handle task execution as normal",
            "Evolve organizational files as needed",
            "Update blueprint metadata as project progresses",
            "Manage todos through tasks"
          ]
        }
      ]
    }
  },
  "configSettings": {
    "autoTaskCreation": {
      "default": false,
      "type": "boolean",
      "description": "Automatically create tasks without user approval"
    },
    "lastUpdatedBehavior": {
      "default": "overwrite",
      "type": "string",
      "enum": ["overwrite", "append"],
      "description": "How to handle README last updated sections"
    },
    "databaseProgressTracking": {
      "default": true,
      "type": "boolean",
      "description": "Use database for tracking file analysis progress instead of README.json"
    }
  },
  "integrations": [
    "13-metadata-management",
    "04-theme-management",
    "06-task-management",
    "07-implementation-plans",
    "08-project-management"
  ],
  "dependencies": [
    "ProjectBlueprint/",
    "ProjectFlow/",
    "ProjectLogic/",
    "ProjectBlueprint/metadata.json",
    "reference/templates/README-template.md",
    "reference/templates/README-template.json"
  ],
  "keyOperations": [
    "Blueprint creation",
    "Theme discovery",
    "Flow definition",
    "Metadata initialization",
    "File metadata initialization",
    "Database-driven progress tracking",
    "Initialization phase management",
    "Project evaluation",
    "README management"
  ],
  "validation": {
    "blueprintApproval": "User must approve project blueprint before proceeding",
    "themeApproval": "User must approve theme assessment and generation",
    "completionPathApproval": "User must approve completion path definition",
    "organizationalFileUpdates": "User must approve updates to core organizational files"
  },
  "errorHandling": {
    "userRejection": "Revise and resubmit for approval",
    "incompleteInformation": "Continue gathering information before proceeding",
    "resourceConstraints": "Adjust reading strategy based on project size, use batch processing",
    "sessionTermination": "Use database file_metadata table and initialization_phase tracking for seamless resumption"
  },
  "progressTracking": {
    "method": "Database file_metadata table with sessions table integration",
    "phases": [
      "not_started ‚Üí discovering_files ‚Üí analyzing_themes ‚Üí building_flows ‚Üí complete"
    ],
    "indicators": [
      "initialization_phase in sessions table tracks current stage",
      "files_processed and total_files_discovered in sessions table track progress",
      "initialization_analyzed flag in file_metadata indicates file assessment complete",
      "last_analyzed timestamp indicates currency of assessment",
      "Completion percentage calculated as files_processed / total_files_discovered"
    ],
    "resumption": "Use get_unanalyzed_files() method to resume from interruption point",
    "tools": [
      "get_initialization_progress - Current progress status with analytics", 
      "resume_initialization - Continue incomplete initialization from any point",
      "session_get_initialization_summary - Comprehensive progress reporting",
      "session_reset_initialization - Safe reset with confirmation"
    ]
  },
  "documentationRequirements": {
    "readmeManagement": {
      "readmeMd": "Standard human-readable documentation following best practices",
      "databaseMetadata": "AI-specific metadata stored in database for quick directory assessment"
    },
    "templates": [
      "reference/templates/README-template.md"
    ]
  }
}