{
  "metadata": {
    "id": "11-quality-assurance",
    "title": "Quality Assurance Directives",
    "priority": "critical",
    "frequency": "continuous",
    "version": "1.0.0",
    "humanReadable": "reference/directivesmd/11-quality-assurance.md"
  },
  "triggers": [
    "Code modification",
    "Task completion",
    "Testing initiation",
    "File validation",
    "Theme changes",
    "Structure modifications",
    "JSON schema updates"
  ],
  "workflows": {
    "testingProtocol": {
      "directive": "Maintain standard testing practices without theme-based over-testing",
      "standardTestingScope": [
        "Test specific components/functions being developed",
        "Test actual integration points (APIs, databases, etc.)",
        "Test specific user flows being implemented",
        "Follow project's existing test frameworks"
      ],
      "themeContextUsage": [
        "Use themes for understanding component purpose",
        "Use themes for locating appropriate test file placement",
        "Use themes for understanding dependencies",
        "DO NOT test entire themes comprehensively unless explicitly requested"
      ],
      "prohibitedTesting": [
        "Automatic comprehensive theme testing",
        "Artificial test suites based solely on theme membership",
        "Cross-theme testing without specific integration work",
        "Testing unrelated components just because they share a theme"
      ],
      "steps": [
        {
          "action": "identifyTestScope",
          "description": "Identify what specifically needs testing based on current work",
          "required": true
        },
        {
          "action": "validateTestFramework",
          "description": "Ensure tests use project's existing test framework",
          "required": true
        },
        {
          "action": "executeStandardTests",
          "description": "Run unit, integration, and flow tests for modified components",
          "required": true
        },
        {
          "action": "avoidThemeOverTesting",
          "description": "Ensure testing scope is limited to actual work, not theme membership",
          "required": true
        }
      ]
    },
    "validationRequirements": {
      "directive": "Validate all project artifacts for consistency and correctness",
      "steps": [
        {
          "action": "validateThemeReferences",
          "description": "Ensure all referenced files and paths exist, linked themes are valid",
          "required": true
        },
        {
          "action": "validateTaskReferences",
          "description": "Smart validation of task milestone, theme, and flow references",
          "required": true,
          "smartValidation": {
            "purpose": "Prevent artificial restrictions that could cause AI to break connected functionality",
            "approach": "Validate references exist but allow AI discretionary context escalation",
            "modes": {
              "smart": "Validate flow references exist, warn on missing, allow cross-flow and context escalation (default)",
              "strict": "Enforce exact flow references as specified in task files",
              "disabled": "No flow reference validation (not recommended)"
            },
            "crossFlowBehavior": {
              "sidequests": "Can reference any flows needed to address discovered issues during development",
              "subtasks": "Can reference additional flows if needed for complete implementation",
              "contextExpansion": "AI can load related flows within theme scope without user approval"
            }
          }
        },
        {
          "action": "validateFileExistence",
          "description": "Ensure all referenced files exist or are marked as pending",
          "required": true,
          "condition": "validation.validateFileExistence = true"
        },
        {
          "action": "validateJsonSchemas",
          "description": "Validate all JSON files conform to their schemas",
          "required": true,
          "condition": "validation.validateJsonSchemas = true"
        },
        {
          "action": "validateStructureChanges",
          "description": "Require user approval for structure modifications",
          "required": true,
          "condition": "validation.requireApprovalForStructureChanges = true",
          "userApprovalRequired": true
        }
      ]
    },
    "codeQualityStandards": {
      "directive": "Maintain high code quality without introducing placeholders",
      "qualityRequirements": [
        "Complete implementations only",
        "Proper error handling",
        "Clear naming conventions",
        "Appropriate comments (but not placeholder comments)",
        "Consistent formatting",
        "Modular architecture"
      ],
      "qualityChecks": [
        "No TODO comments without associated tasks",
        "No placeholder functions",
        "No dead code",
        "No unused imports",
        "Proper type definitions where applicable"
      ],
      "steps": [
        {
          "action": "validateImplementationCompleteness",
          "description": "Ensure all implementations are complete, not placeholder",
          "required": true
        },
        {
          "action": "checkErrorHandling",
          "description": "Verify proper error handling is implemented",
          "required": true
        },
        {
          "action": "validateCodeStructure",
          "description": "Check naming conventions, formatting, and modular architecture",
          "required": true
        }
      ]
    },
    "dataIntegrityProtocol": {
      "directive": "Ensure data integrity across all project management artifacts",
      "integrityChecks": [
        "Cross-reference validation between files",
        "Consistency checks between themes and tasks",
        "File existence validation for all references",
        "JSON schema validation for structured files",
        "Backup verification for critical operations"
      ],
      "steps": [
        {
          "action": "performCrossReferenceValidation",
          "description": "Validate references between project files",
          "required": true
        },
        {
          "action": "checkThemeTaskConsistency",
          "description": "Ensure themes and tasks are consistent",
          "required": true
        },
        {
          "action": "validateFileReferences",
          "description": "Check all file references exist",
          "required": true
        },
        {
          "action": "validateJsonStructures",
          "description": "Validate JSON files against schemas",
          "required": true
        }
      ]
    },
    "auditTrailRequirements": {
      "directive": "Maintain complete audit trails for all significant operations",
      "auditComponents": [
        "All AI decisions with reasoning",
        "All user interactions and approvals",
        "All file modifications with context",
        "All theme changes with impact assessment",
        "All task state changes with triggers",
        "All context escalations with justification"
      ],
      "steps": [
        {
          "action": "logAiDecisions",
          "description": "Document AI decisions and reasoning in projectlogic.jsonl",
          "required": true
        },
        {
          "action": "logUserInteractions",
          "description": "Record user interactions and approvals",
          "required": true
        },
        {
          "action": "logFileModifications",
          "description": "Track file modifications with context",
          "required": true
        },
        {
          "action": "logStateChanges",
          "description": "Record task and theme state changes",
          "required": true
        }
      ]
    }
  },
  "configSettings": {
    "validation.enforceTaskMilestoneReference": {
      "default": true,
      "type": "boolean",
      "description": "Require all tasks to reference valid milestones"
    },
    "validation.enforceTaskThemeReference": {
      "default": true,
      "type": "boolean",
      "description": "Require all tasks to specify primary and related themes"
    },
    "validation.flowReferenceValidation": {
      "default": "smart",
      "type": "string",
      "enum": ["smart", "strict", "disabled"],
      "description": "Smart validation mode - validate flow references exist but allow cross-flow and context escalation"
    },
    "validation.crossFlowAwareness": {
      "default": true,
      "type": "boolean",
      "description": "Allow sidequests to reference any flows needed to address discovered issues during development"
    },
    "validation.contextEscalationAllowed": {
      "default": true,
      "type": "boolean", 
      "description": "AI can load related flows within theme scope without user approval"
    },
    "validation.warnOnMissingReferences": {
      "default": true,
      "type": "boolean",
      "description": "Warn but don't block when flow references are missing"
    },
    "validation.validateFileExistence": {
      "default": true,
      "type": "boolean",
      "description": "Validate all referenced files exist or are marked as pending"
    },
    "validation.requireApprovalForStructureChanges": {
      "default": true,
      "type": "boolean",
      "description": "Require user approval for structure modifications"
    },
    "validation.validateJsonSchemas": {
      "default": true,
      "type": "boolean",
      "description": "Validate all JSON files conform to their schemas"
    },
    "testing.avoidThemeOverTesting": {
      "default": true,
      "type": "boolean",
      "description": "Prevent automatic comprehensive theme testing"
    },
    "quality.enforceCompleteImplementations": {
      "default": true,
      "type": "boolean",
      "description": "Require complete implementations without placeholders"
    },
    "audit.logAllDecisions": {
      "default": true,
      "type": "boolean",
      "description": "Log all AI decisions with reasoning"
    }
  },
  "integrations": [
    "01-system-initialization",
    "04-theme-management",
    "06-task-management",
    "10-file-operations",
    "12-user-interaction"
  ],
  "dependencies": [
    ".ai-pm-config.json",
    "ProjectBlueprint/metadata.json",
    "projectlogic.jsonl",
    "Project test framework",
    "JSON schema files"
  ],
  "keyOperations": [
    "Standard testing protocol",
    "Validation requirements",
    "Code quality enforcement",
    "Data integrity checks",
    "Audit trail maintenance"
  ],
  "errorHandling": {
    "testFailures": "Report failures and maintain in_progress status",
    "validationErrors": "Provide clear error messages and resolution steps",
    "qualityIssues": "Require fixes before marking tasks complete",
    "integrityViolations": "Stop processing and require user intervention",
    "auditFailures": "Log errors and ensure trail continuity"
  },
  "validation": {
    "testingScope": "Must be limited to actual work, not theme membership",
    "validationRules": "Must respect configuration settings",
    "codeQuality": "Must meet standards without placeholders",
    "dataIntegrity": "Must maintain consistency across all artifacts",
    "auditTrail": "Must be complete and traceable"
  }
}