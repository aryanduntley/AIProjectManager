{
  "metadata": {
    "id": "05-context-loading",
    "title": "Context Loading Directives",
    "priority": "high",
    "frequency": "per-task",
    "version": "1.0.0",
    "humanReadable": "docs/directives/05-context-loading.md"
  },
  "triggers": [
    "Task initialization",
    "Context escalation",
    "Theme context switching",
    "Project structure analysis",
    "Multi-flow loading",
    "Flow scope evaluation"
  ],
  "workflows": {
    "contextModeSelection": {
      "directive": "Always use appropriate context mode based on task complexity and theme relationships",
      "modes": {
        "theme-focused": {
          "description": "Primary theme only - DISCRETIONARY HIGH LIMIT. Theme scope defines maximum boundary, AI loads minimal files actually needed for task",
          "memoryUsage": "~5-15 files, ~0.5-1MB memory",
          "use": "Tasks within single theme",
          "discretionaryLoading": true
        },
        "theme-expanded": {
          "description": "Primary + linked themes. Requires user approval or context escalation",
          "memoryUsage": "~15-25 files, ~1-2MB memory",
          "use": "Cross-theme integration, >2 linked themes, shared files",
          "requiresApproval": true
        },
        "project-wide": {
          "description": "All themes. Always requires user approval",
          "memoryUsage": "~23+ files, ~2+ MB memory", 
          "use": "Architecture changes, global refactoring, cross-cutting concerns",
          "requiresApproval": true
        }
      },
      "selectionLogic": [
        "Start with theme-focused for tasks within single theme",
        "Escalate to theme-expanded if task mentions cross-theme integration",
        "Use project-wide only for architectural changes"
      ]
    },
    "readmeGuidedLoading": {
      "directive": "Always prioritize README files for quick context understanding",
      "configKey": "contextLoading.readmeFirst",
      "default": true,
      "protocol": [
        "Load theme structure from JSON files",
        "Discretionary Flow Loading: AI loads only relevant flow files from ProjectFlow/ directory based on task requirements",
        "Read README.md files in relevant directories (limit 2KB each)",
        "Minimal File Loading: AI assesses and loads only specific files actually needed for the task (theme scope is discretionary high limit)",
        "Use README context to avoid unnecessary code analysis",
        "Load specific code files only when determined essential"
      ],
      "priorityOrder": [
        "Project root README.md",
        "Theme directory READMEs",
        "Subdirectory READMEs in loaded paths"
      ]
    },
    "globalFileAccess": {
      "directive": "Certain files are always accessible regardless of theme context",
      "alwaysAccessible": [
        "Configuration: package.json, requirements.txt, *.config.js, .env",
        "Documentation: README.md, LICENSE, CHANGELOG.md",
        "Entry points: index.js, main.ts, app.js, App.tsx",
        "Global utilities: src/config/, src/constants/, src/types/, src/utils/",
        "Build/deployment: Dockerfile, docker-compose.yml, Makefile"
      ],
      "accessRules": [
        "Available when contextually relevant",
        "No forced loading",
        "Modification allowed when appropriate",
        "Cross-theme accessibility maintained"
      ]
    },
    "contextEscalation": {
      "directive": "Handle mid-task context escalation through structured decision process",
      "decisionTree": [
        "Assess if sidequest can resolve the issue",
        "Determine escalation need",
        "User communication",
        "Implementation"
      ],
      "escalationReasons": [
        "Current context insufficient for proper implementation",
        "Cross-theme dependencies discovered",
        "Architectural changes needed",
        "Risk of breaking changes without broader context"
      ],
      "userNotificationFormat": "I need to expand context to properly implement [specific requirement].\n\nCurrent context: [current-mode]\nNeeded context: [needed-mode]\n\nReason: [specific-reason]\n\nOptions:\n1. Create sidequest\n2. Expand context\n3. Defer requirement\n\nRecommended approach: [recommendation]",
      "constraints": [
        "Maximum one escalation per task",
        "User approval required",
        "Log escalation in ai-decisions.jsonl",
        "Prepare rollback if escalation doesn't resolve issue"
      ]
    },
    "multiFlowContextLoading": {
      "directive": "Handle multi-flow system context loading with flow scope optimization and theme scope fallback",
      "flowIndexLoading": [
        "Load flow-index.json to understand available flow files and cross-flow dependencies",
        "Selective Flow Loading: Load only relevant flow files based on task requirements",
        "Cross-Flow Dependencies: Always load referenced flow files from flow-index.json",
        "Flow File Limits: Respect contextLoading.maxFlowFiles"
      ],
      "flowFileLoadingRules": {
        "theme-focused": "Load flow files associated with primary theme",
        "theme-expanded": "Load flow files from primary + related themes",
        "project-wide": "Load all flow files (subject to maxFlowFiles limit)",
        "cross-flow-dependencies": "Always load referenced flow files from flow-index.json"
      },
      "flowScopeProtocol": {
        "directive": "Flow scope is a performance optimization, not a limitation. Theme scope is always available.",
        "flowScopeImplementation": {
          "initialContext": "Start with flow scope for resource management and performance",
          "automaticExpansion": "AI can expand from flow scope to theme scope without user approval",
          "noRestrictions": "Flow scope is self-implemented optimization, not a boundary",
          "resourceManagement": "Use flow scope to minimize initial memory usage"
        },
        "themeScopeAuthority": {
          "alwaysAvailable": "Theme scope is the defined scope boundary for complete context",
          "automaticEscalation": "AI determines when flow scope is insufficient and expands automatically",
          "noUserApproval": "Expansion from flow scope to theme scope requires no approval or notification",
          "performanceOptimization": "Flow scope improves performance, theme scope ensures completeness"
        },
        "implementationGuidelines": [
          "Start with Flow Scope: Load only flow files referenced in task for initial context",
          "Evaluate Sufficiency: AI determines if flow scope provides adequate context",
          "Automatic Expansion: If insufficient, immediately expand to theme scope",
          "No Barriers: No approval, notification, or consideration needed for expansion",
          "Theme Scope Definition: Theme scope handles all scope expansion decisions"
        ]
      }
    }
  },
  "configSettings": {
    "contextLoading.readmeFirst": {
      "default": true,
      "type": "boolean",
      "description": "Prioritize README files for context understanding"
    },
    "contextLoading.memoryLimit": {
      "default": 100,
      "type": "number",
      "description": "Memory limit in MB before warning"
    },
    "contextLoading.autoEscalate": {
      "default": false,
      "type": "boolean",
      "description": "Allow automatic context escalation"
    },
    "contextLoading.maxFlowFiles": {
      "default": 3,
      "type": "number",
      "description": "Maximum number of flow files to load simultaneously"
    }
  },
  "integrations": [
    "04-theme-management",
    "06-task-management",
    "07-implementation-plans",
    "09-logging-documentation"
  ],
  "dependencies": [
    "Themes/ directory",
    "Themes/themes.json",
    "ProjectFlow/ directory",
    "ProjectFlow/flow-index.json",
    "README.md files",
    "Theme JSON files",
    "UserSettings/config.json"
  ],
  "keyOperations": [
    "Context mode selection",
    "Multi-flow context loading",
    "Flow scope optimization",
    "README-guided loading",
    "Memory optimization",
    "Escalation management"
  ],
  "memoryOptimization": {
    "rules": [
      "Limit README files to 2KB each",
      "Stream large files instead of loading into memory",
      "Use lazy loading for theme definitions",
      "Estimate memory usage and warn if >100MB",
      "Recommend context reduction if memory usage excessive",
      "Cache frequently accessed theme data"
    ]
  },
  "sharedFileImpact": {
    "assessmentProcess": [
      "Identify affected themes from shared array",
      "Quick impact assessment via theme READMEs",
      "Proceed with cross-theme awareness",
      "Document cross-theme changes"
    ]
  },
  "taskCreationApproval": {
    "directive": "AI determines theme scope for task files at creation based on task requirements",
    "configKey": "tasks.autoTaskCreation",
    "themeScopeSelection": {
      "process": [
        "AI analyzes task requirements to determine appropriate theme scope",
        "Primary theme selection based on task domain and file requirements", 
        "Related themes identified based on cross-theme dependencies"
      ]
    },
    "approvalRequirements": {
      "autoTaskCreation_true": "AI can create task files with determined theme scope without user approval",
      "autoTaskCreation_false": "User approval required for task file creation with AI-determined theme scope",
      "contextEscalation": "Always requires user approval regardless of autoTaskCreation setting"
    },
    "documentation": [
      "Theme scope must be documented in task file contextMode field",
      "Primary theme and related themes must be specified",
      "Rationale for theme selection included in task notes if autoTaskCreation=false"
    ]
  },
  "discretionaryLoadingPrinciples": {
    "themeScope": "Theme defines maximum boundary, AI loads minimal files actually needed for task within theme scope",
    "flowScope": "AI discretionarily loads only relevant flow files from ProjectFlow/ directory based on task requirements",
    "contextPrinciple": "Load minimal context needed for task completion, escalate only when insufficient",
    "escalationPath": "theme-focused → theme-expanded (user approval) → project-wide (user approval)"
  }
}