{
  "integrationValidation": {
    "taskValidation": {
      "requiredFields": ["milestone", "primaryTheme", "subtasks"],
      "milestoneCheck": "Referenced milestone must exist in completion-path.json",
      "themeCheck": "primaryTheme and relatedThemes must exist in Themes/ directory",
      "flowCheck": "Smart validation - validate flow references exist but allow cross-flow and context escalation",
      "flowFileCheck": "Referenced flow files must exist in ProjectFlow/ directory", 
      "flowIndexCheck": "Flow files must be registered in flow-index.json",
      "smartValidation": "AI can reference any flows needed for complete context understanding"
    },
    "themeValidation": {
      "requiredFields": ["theme", "paths", "files"],
      "pathValidation": "All paths in theme must exist or be marked as pending",
      "linkedThemeCheck": "All linkedThemes must exist as valid theme files",
      "sharedFileValidation": "Shared files must exist and properly document sharing relationships"
    },
    "flowValidation": {
      "requiredFields": ["trigger", "steps", "outcomes"],
      "flowIndexIntegration": "All flows must be registered in flow-index.json",
      "crossFlowDependencies": "Cross-flow references must specify flowId and flowFile",
      "milestoneIntegration": "Flow completion must align with milestone requirements"
    }
  },
  "dataIntegrity": {
    "crossReferenceConsistency": [
      "Task milestone references must match completion-path.json entries",
      "Task theme references must match existing theme files",  
      "Flow step references must exist within specified flow files",
      "Shared files must be documented in all referencing themes"
    ],
    "fileExistence": [
      "All referenced files must exist or be explicitly marked as pending",
      "Theme path directories must exist",
      "Flow file references must point to valid files",
      "README files should exist for all major directories"
    ],
    "schemaCompliance": [
      "All JSON files must validate against their defined schemas",
      "JSONL files must have valid JSON on each line",
      "Required fields must be present and correctly formatted"
    ]
  },
  "criticalChecks": {
    "beforeTaskExecution": [
      "Validate task milestone exists in completion-path.json",
      "Confirm primary theme exists and is accessible", 
      "Check all flow file references are valid and registered",
      "Verify context mode is appropriate for task scope"
    ],
    "beforeFileModification": [
      "Check current file line count vs maxFileLineCount limit",
      "Identify theme implications for file changes",
      "Validate README update requirements",
      "Ensure no placeholder patterns will be introduced"
    ],
    "beforeUserApproval": [
      "Validate all proposed changes are internally consistent",
      "Check for conflicts with existing project structure",
      "Ensure all dependencies are properly documented",
      "Verify rationale is clear and complete"
    ],
    "beforeProjectCompletion": [
      "Mandatory review of todos.jsonl for unresolved items",
      "Validate all milestones marked complete have met success criteria",
      "Check for any pending tasks or sidequests",
      "Ensure project blueprint reflects final state"
    ]
  },
  "failureResponse": {
    "validationFailure": {
      "action": "Stop current operation immediately",
      "reporting": "Provide specific failure details with file/line references",
      "recovery": "Request user guidance or correction before proceeding"
    },
    "integrityViolation": {
      "action": "Do not modify any files until violation resolved",
      "logging": "Log violation details in noteworthy.json",
      "escalation": "Require user intervention for resolution"
    },
    "contextInsufficient": {
      "action": "Suggest context mode escalation",
      "options": ["Load additional themes", "Escalate to theme-expanded", "Request project-wide context"],
      "fallback": "Wait for user decision on context expansion"
    },
    "directiveAmbiguity": {
      "action": "Escalate directive context systematically",
      "escalationSequence": [
        "Check directive-compressed.json for basic workflow",
        "Escalate to reference/directives/{directive}.json for detailed specifications",
        "If still ambiguous, escalate to ../docs/directives/{directive}.md for comprehensive context"
      ],
      "automaticEscalation": "Compressed → JSON escalation automatic for workflow clarification",
      "approvalRequired": "JSON → MD escalation requires user consent for complex analysis",
      "fallback": "Request user clarification if MD level insufficient"
    }
  },
  "configurationValidation": {
    "criticalSettings": [
      "project.maxFileLineCount must be positive integer",
      "project.avoidPlaceholders should be boolean (default: true)",
      "themes.autoDiscovery should be boolean (default: true)",
      "contextLoading.defaultMode must be valid context mode",
      "validation.flowReferenceValidation must be 'smart', 'strict', or 'disabled' (default: 'smart')"
    ],
    "settingDependencies": [
      "If project.autoModularize=true, project.maxFileLineCount must be set",
      "If tasks.resumeTasksOnStart=true, session boot must check active tasks",
      "If themes.autoDiscovery=true, theme validation must be enabled",
      "If validation.flowReferenceValidation=smart, crossFlowAwareness and contextEscalationAllowed should be true"
    ]
  },
  "smartValidationRules": {
    "purpose": "Prevent artificial restrictions that could cause AI to break connected functionality",
    "approach": "Validate references exist but allow AI discretionary context escalation",
    "modes": {
      "smart": "Validate flow references exist, warn on missing, allow cross-flow and context escalation (default)",
      "strict": "Enforce exact flow references as specified in task files", 
      "disabled": "No flow reference validation (not recommended)"
    },
    "crossFlowBehavior": {
      "sidequests": "Can reference any flows needed to address discovered issues during development",
      "subtasks": "Can reference additional flows if needed for complete implementation", 
      "contextExpansion": "AI can load related flows within theme scope without user approval"
    },
    "preventingBrokenCode": [
      "AI can see full context to avoid breaking connected functionality",
      "Flow scope is performance optimization, not artificial limitation",
      "Theme scope provides safety boundary for complete understanding",
      "Context escalation ensures holistic solutions over isolated fixes"
    ]
  }
}