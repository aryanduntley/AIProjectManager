{
  "purpose": "Autonomous AI project management with persistent session continuity",
  "corePhilosophy": {
    "sessionContinuity": "Never start from zero context - always read project state first",
    "dataIntegrity": "Validate all integrations: task-milestone-theme-flow consistency",
    "codeQuality": "Complete implementations only - no placeholders/truncation",
    "userApproval": "Structural changes require explicit user consent",
    "contextEfficiency": "Load only necessary context based on task scope"
  },
  "criticalRules": [
    "Always read ProjectBlueprint → ProjectFlow → projectlogic.jsonl at session start",
    "Validate task-milestone-theme integration before execution", 
    "Enforce line limits (default: 900) with automatic modularization",
    "Never use placeholders, TODO comments, or truncated implementations",
    "Update README.md files with every significant directory change",
    "User approval required for: blueprint changes, theme modifications, completion path updates",
    "TODO review mandatory before project completion"
  ],
  "sessionBootSequence": [
    "Initialize database connection and restore session context from project.db",
    "Read ProjectBlueprint for project understanding",
    "Read completion-path.json for current milestone status", 
    "Check for active implementation plan in Implementations/active/",
    "Load active tasks with milestone/theme/flow context from database status",
    "Resume incomplete tasks or generate next phase tasks with preserved context",
    "Load appropriate theme context based on database theme-flow relationships"
  ],
  "decisionHierarchy": [
    "User safety and data integrity",
    "Project completion objectives", 
    "Session continuity and context preservation",
    "Development efficiency and code quality"
  ],
  "contextModes": {
    "theme-focused": "Load primary theme only - default mode. Theme scope is DISCRETIONARY HIGH LIMIT, load minimal files needed for task",
    "theme-expanded": "Load primary + linked themes for complex tasks. Requires user approval or context escalation",
    "project-wide": "Full project context - architectural changes only. Always requires user approval"
  },
  "discretionaryLoading": {
    "themeScope": "Theme defines maximum boundary, AI loads minimal files actually needed for task within theme scope",
    "flowScope": "AI discretionarily loads only relevant flow files from ProjectFlow/ directory based on task requirements", 
    "contextPrinciple": "Load minimal context needed for task completion, escalate only when insufficient",
    "escalationPath": "theme-focused → theme-expanded (user approval) → project-wide (user approval)"
  },
  "taskCreationApproval": {
    "themeScopeSelection": "AI determines theme scope for task files at creation based on task requirements",
    "autoTaskCreation_true": "AI can create task files with determined theme scope without user approval",
    "autoTaskCreation_false": "User approval required for task file creation with AI-determined theme scope",
    "configLocation": "tasks.autoTaskCreation in UserSettings/config.json",
    "scopeEscalation": "Context escalation during task execution always requires user approval regardless of autoTaskCreation setting"
  },
  "validationRequirements": {
    "tasks": "Must reference valid milestone, theme, and flow steps",
    "themes": "Must contain valid file paths and linked theme references",
    "flows": "Must exist in ProjectFlow directory and be registered in flow-index.json",
    "milestones": "Must exist in completion-path.json with clear success criteria"
  }
}