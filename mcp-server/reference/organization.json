{
  "metadata": {
    "version": "1.0.0",
    "description": "AI-optimized project structure and organization definition for MCP server",
    "lastUpdated": "2025-01-17T12:00:00Z",
    "humanReadableVersion": "docs/organization.md"
  },
  "projectManagement": {
    "structure": {
      "GitIntegration": {
        "files": [".git/", ".gitignore"],
        "purposes": {
          ".git/": "Root-level Git repository for project code and organizational state",
          ".gitignore": "Updated for MCP instance management exclusions"
        },
        "approvalRequired": false,
        "format": "mixed",
        "instanceManagement": {
          "mainInstancePath": "projectManagement/",
          "instanceDirectory": ".mcp-instances/",
          "instanceNamingConvention": "{theme/area}-{purpose}-{user}",
          "gitTracking": {
            "tracked": ["organizational state", "instance structure", "merge history"],
            "notTracked": ["user settings", "database backups", "session files"]
          }
        }
      },
      "InstanceManagement": {
        "directories": [".mcp-instances/active/", ".mcp-instances/completed/", ".mcp-instances/conflicts/"],
        "files": [".mcp-config.json", ".mcp-merge-log.jsonl"],
        "purposes": {
          ".mcp-instances/active/": "Active instance workspaces with isolated organizational state",
          ".mcp-instances/completed/": "Archived completed instances",
          ".mcp-instances/conflicts/": "Conflict resolution workspace and templates",
          ".mcp-config.json": "Instance management configuration",
          ".mcp-merge-log.jsonl": "Merge history and decisions log"
        },
        "approvalRequired": {
          ".mcp-config.json": true,
          "instance creation": false,
          "merge operations": true
        },
        "format": "json+jsonl",
        "instanceMetadata": {
          "branchInfoFile": ".mcp-branch-info.json",
          "workSummaryFile": ".mcp-work-summary.md",
          "requiredFields": ["instanceId", "createdFrom", "purpose", "primaryThemes"],
          "statusValues": ["active", "merging", "completed", "archived"]
        }
      },
      "ProjectBlueprint": {
        "files": ["blueprint.md", "metadata.json", ".mcp-instance-main"],
        "purposes": {
          "blueprint.md": "High-level project summary (user-approved)",
          "metadata.json": "Project metadata, tags, author, dates",
          ".mcp-instance-main": "Main instance identification marker (canonical organizational state)"
        },
        "approvalRequired": true,
        "format": "markdown+json"
      },
      "ProjectFlow": {
        "files": ["flow-index.json"],
        "dynamicFiles": ["*-flow.json"],
        "purposes": {
          "flow-index.json": "Master flow index with flow file references and cross-flow dependencies, selective loading coordination",
          "*-flow.json": "Individual flow files organized by domain/theme (e.g., authentication-flow.json, payment-flow.json)"
        },
        "approvalRequired": true,
        "format": "json",
        "multiFlowCapabilities": {
          "selectiveLoading": "AI selectively loads only relevant flow files based on task context",
          "crossFlowDependencies": "Manage complex user journeys across multiple flow files",
          "resourceOptimization": "When working on flows, AI tries flow files first, expands to theme files as needed",
          "statusTracking": "Flow and step-level progress tracking with milestone integration"
        }
      },
      "ProjectLogic": {
        "files": ["projectlogic.jsonl"],
        "directories": ["archived/"],
        "purposes": {
          "projectlogic.jsonl": "Stateful record of AI/user decisions and logic evolution",
          "archived/": "Auto-archived when size limit reached"
        },
        "approvalRequired": false,
        "format": "jsonl",
        "archiving": {
          "trigger": "size_limit",
          "defaultLimit": "2MB",
          "configKey": "archiving.projectlogicSizeLimit"
        }
      },
      "Themes": {
        "files": ["themes.json"],
        "dynamicFiles": ["*.json"],
        "purposes": {
          "themes.json": "Master theme index with descriptions",
          "*.json": "Individual theme definitions with file paths and relationships"
        },
        "approvalRequired": true,
        "format": "json",
        "autoDiscovery": true
      },
      "Tasks": {
        "files": ["completion-path.json"],
        "directories": ["active/", "sidequests/", "archive/"],
        "purposes": {
          "completion-path.json": "Project completion roadmap with milestones",
          "active/": "Current task files with milestone/theme/flow references",
          "sidequests/": "Subtasks spawned from main task context",
          "archive/": "Completed tasks and sidequests"
        },
        "filePatterns": {
          "active/": "TASK-<timestamp>.json",
          "sidequests/": "SQ-<tasktimestamp>-<seq>.json"
        },
        "approvalRequired": {
          "completion-path.json": true,
          "tasks": false,
          "sidequests": false
        },
        "format": "json"
      },
      "Implementations": {
        "directories": ["active/", "completed/"],
        "purposes": {
          "active/": "Current milestone implementation plans",
          "completed/": "Archived completed implementation plans"
        },
        "filePatterns": {
          "active/": "M{milestone-id}-v{version}-{description}.md",
          "completed/": "M{milestone-id}-v{version}-{description}.md"
        },
        "approvalRequired": true,
        "format": "markdown"
      },
      "Logs": {
        "files": ["noteworthy.json"],
        "directories": ["archived/"],
        "purposes": {
          "noteworthy.json": "AI decisions and user feedback for notable events",
          "archived/": "Auto-archived when size limit reached"
        },
        "approvalRequired": false,
        "format": "json",
        "archiving": {
          "trigger": "size_limit",
          "defaultLimit": "1MB",
          "configKey": "archiving.noteworthySizeLimit"
        }
      },
      "Placeholders": {
        "files": ["todos.jsonl"],
        "purposes": {
          "todos.jsonl": "Deferred implementation notes and scaffolding TODOs"
        },
        "approvalRequired": false,
        "format": "jsonl"
      },
      "UserSettings": {
        "files": ["config.json"],
        "purposes": {
          "config.json": "User configuration and preferences"
        },
        "approvalRequired": false,
        "format": "json"
      },
      "Database": {
        "files": ["project.db"],
        "directories": ["database/"],
        "purposes": {
          "project.db": "SQLite database for persistent theme-flow relationships, session tracking, project analytics, and Git-like instance management",
          "database/": "Database management files for backup storage"
        },
        "databaseDirectory": {
          "directories": ["backups/"],
          "purposes": {
            "backups/": "Periodic database backups for recovery (schema.sql maintained in MCP server for security)"
          }
        },
        "approvalRequired": false,
        "format": "sqlite",
        "features": {
          "sessionPersistence": "Complete session state preservation across disconnections with context snapshots",
          "taskLifecycleManagement": "Real-time task/subtask/sidequest status tracking with multiple sidequest support",
          "themeFlowIntelligence": "Many-to-many theme-flow relationships with relevance ordering and fast lookups",
          "fileOperations": "Intelligent file discovery and impact analysis replacing README.json approach",
          "userLearning": "Preference tracking and adaptive AI behavior based on usage patterns",
          "eventAnalytics": "Real-time event tracking and pattern recognition for decision analysis",
          "projectIntelligence": "Comprehensive analytics and predictive insights for optimization",
          "gitIntegration": "Git state tracking and project code change detection",
          "instanceManagement": "MCP instance lifecycle tracking and coordination",
          "mergeHistory": "Conflict resolution decisions and merge operation logging"
        },
        "gitIntegrationSchema": {
          "tables": ["git_project_state", "mcp_instances", "instance_merges"],
          "capabilities": ["change detection", "instance isolation", "conflict resolution", "merge tracking"]
        },
        "instanceIsolation": {
          "databaseCopying": "Each instance gets isolated copy of main project.db",
          "changeTracking": "Instance-specific changes tracked separately",
          "mergeIntegration": "Database changes included in merge conflict detection"
        }
      }
    }
  },
  "fileTypes": {
    "blueprint.md": {
      "format": "markdown",
      "approvalRequired": true,
      "description": "High-level project summary",
      "integrations": ["metadata.json", "flow-index.json", "projectlogic.jsonl"]
    },
    "metadata.json": {
      "format": "json",
      "approvalRequired": true,
      "description": "Project metadata and characteristics",
      "schema": "reference/templates/metadata.json"
    },
    "flow-index.json": {
      "format": "json",
      "approvalRequired": true,
      "description": "Master flow index with flow file references and cross-flow dependencies, selective loading coordination",
      "schema": "reference/templates/flow-index.json",
      "statusTracking": {
        "flowLevel": ["pending", "in-progress", "complete", "needs-review"],
        "stepLevel": ["pending", "in-progress", "complete", "needs-analyze", "blocked"]
      },
      "multiFlowCapabilities": [
        "Cross-flow dependency management",
        "Selective flow loading for performance",
        "Flow completion tracking",
        "Milestone integration validation"
      ]
    },
    "*-flow.json": {
      "format": "json",
      "approvalRequired": true,
      "description": "Individual flow files organized by domain/theme with enhanced status tracking",
      "schema": "reference/templates/authentication-flow.json",
      "statusTracking": {
        "flowLevel": ["pending", "in-progress", "complete", "needs-review"],
        "stepLevel": ["pending", "in-progress", "complete", "needs-analyze", "blocked"],
        "completionPercentage": "Calculated from individual step completion status",
        "milestoneIntegration": "Integration with completion path milestones for validation"
      },
      "enhancedFeatures": [
        "Step-level dependencies",
        "Completion timestamps",
        "File reference implementation status",
        "Cross-flow references with flowId and flowFile"
      ]
    },
    "projectlogic.jsonl": {
      "format": "jsonl",
      "approvalRequired": false,
      "description": "Evolving project logic and decisions",
      "schema": "reference/templates/projectlogic.jsonl"
    },
    "themes.json": {
      "format": "json",
      "approvalRequired": true,
      "description": "Master theme index",
      "schema": "reference/templates/themes.json"
    },
    "completion-path.json": {
      "format": "json",
      "approvalRequired": true,
      "description": "Project completion roadmap",
      "schema": "reference/templates/completion-path.json"
    },
    "TASK-*.json": {
      "format": "json",
      "approvalRequired": false,
      "description": "Task files with integrations",
      "schema": "reference/templates/task-active.json",
      "requiredIntegrations": ["milestone", "theme", "multiflow"]
    },
    "SQ-*.json": {
      "format": "json",
      "approvalRequired": false,
      "description": "Sidequest files",
      "schema": "reference/templates/sidequest.json"
    },
    "M*-v*-*.md": {
      "format": "markdown",
      "approvalRequired": true,
      "description": "Implementation plans",
      "schema": "reference/templates/implementation-plan-template.md"
    },
    "noteworthy.json": {
      "format": "json",
      "approvalRequired": false,
      "description": "Notable events and decisions",
      "schema": "reference/templates/noteworthy.json"
    },
    "todos.jsonl": {
      "format": "jsonl",
      "approvalRequired": false,
      "description": "TODO and placeholder tracking",
      "schema": "reference/templates/todos.jsonl"
    },
    "config.json": {
      "format": "json",
      "approvalRequired": false,
      "description": "User settings and preferences",
      "schema": "reference/templates/config.json"
    },
    ".mcp-branch-info.json": {
      "format": "json",
      "approvalRequired": false,
      "description": "Instance metadata and creation details",
      "template": "reference/templates/mcp-branch-info.json",
      "requiredFields": ["instanceId", "createdFrom", "createdAt", "purpose", "primaryThemes"],
      "templateUsage": "mandatory"
    },
    ".mcp-work-summary.md": {
      "format": "markdown",
      "approvalRequired": false,
      "description": "Human-readable work summary for instance",
      "template": "reference/templates/mcp-work-summary.md",
      "templateUsage": "mandatory"
    },
    ".mcp-config.json": {
      "format": "json",
      "approvalRequired": true,
      "description": "Instance management configuration",
      "template": "reference/templates/mcp-config.json",
      "templateUsage": "recommended"
    },
    ".mcp-merge-log.jsonl": {
      "format": "jsonl",
      "approvalRequired": false,
      "description": "Merge history and conflict resolution decisions",
      "template": "reference/templates/mcp-merge-log.jsonl",
      "templateUsage": "mandatory"
    }
  },
  "integrationRequirements": {
    "taskFiles": {
      "required": ["milestone", "theme", "multiflow"],
      "validation": {
        "milestone": "Must exist in completion-path.json",
        "theme": "Must exist in Themes/ directory",
        "multiflow": "Flow files must exist in ProjectFlow/ directory and be registered in flow-index.json"
      }
    },
    "themeFiles": {
      "required": ["theme", "paths", "files"],
      "optional": ["linkedThemes", "sharedFiles"],
      "autoMaintenance": true
    },
    "flowFiles": {
      "required": ["trigger", "steps", "outcomes"],
      "statusTracking": true,
      "milestoneIntegration": true,
      "indexFile": "flow-index.json",
      "multiFlowFeatures": {
        "selectiveLoading": "AI selectively loads only relevant flow files based on task context",
        "crossFlowDependencies": "Manage dependencies between flows in different files",
        "resourceOptimization": "When working on flows, AI tries flow files first, expands to theme files as needed",
        "statusTransitionRules": "Enforce logical step and flow completion order"
      }
    },
    "instanceManagement": {
      "required": ["instanceId", "createdFrom", "purpose"],
      "optional": ["createdBy", "expectedDuration", "relatedFlows"],
      "validation": {
        "instanceId": "Must follow naming convention {theme/area}-{purpose}-{user}",
        "createdFrom": "Must be 'main' or valid instance ID",
        "purpose": "Must be descriptive and specific to work being done",
        "primaryThemes": "Must exist in Themes/ directory"
      },
      "lifecycle": {
        "creation": "Copy main projectManagement/ to instance workspace",
        "isolation": "Instance operates independently with own database copy",
        "merging": "Main instance authority for conflict resolution",
        "completion": "Archive to .mcp-instances/completed/"
      }
    }
  },
  "contextLoading": {
    "modes": {
      "theme": {
        "description": "AI can access and selectively load from specific themes",
        "default": true
      },
      "multi-theme": {
        "description": "AI can access and selectively load from multiple related themes"
      },
      "project-wide": {
        "description": "AI can access and selectively load from entire project (for architectural changes)"
      }
    },
    "process": [
      "Load primary theme files structure from Themes/[theme].json",
      "Load flow-index.json to understand available flow files and cross-flow dependencies",
      "AI selectively loads only the specific flow files needed for the task",
      "Load related theme interfaces and shared files as needed",
      "Read README.md files in relevant directories for quick context",
      "AI assesses and loads only specific files needed for the task",
      "AI can request multi-theme scope if insufficient context",
      "User can override to project-wide if architectural changes needed"
    ],
    "multiFlowResourceOptimization": {
      "flowFocusedWork": "When working on flows, AI tries to limit context loading to relevant flow files first",
      "automaticExpansion": "AI can expand to load theme files when needed without user approval",
      "selectiveLoading": "AI always loads only what it needs within the defined scope boundaries",
      "scopeBoundaries": {
        "themeScope": "AI can access and selectively load from specific themes",
        "multiThemeScope": "AI can access and selectively load from multiple related themes", 
        "projectWideScope": "AI can access and selectively load from entire project"
      }
    },
    "alwaysAvailable": {
      "projectRoot": [
        "package.json", "requirements.txt", "Cargo.toml", "composer.json",
        ".env", ".env.local", "config.json", "settings.json",
        "Dockerfile", "docker-compose.yml", "Makefile", "vite.config.js",
        "README.md", "LICENSE", "CHANGELOG.md",
        ".gitignore", ".gitattributes"
      ],
      "sourceRoot": [
        "index.js", "main.ts", "app.js", "App.tsx",
        "config/", "constants/", "types/", "utils/",
        "app.js", "router.js", "store.js"
      ]
    }
  },
  "themeDiscovery": {
    "autoDiscovery": true,
    "methods": [
      "keyword matching",
      "folder path structure analysis",
      "import reference graphs"
    ],
    "categories": [
      "Functional Domains",
      "Technical Layers", 
      "UI Components",
      "External Integrations",
      "Data Management",
      "Operational"
    ],
    "maintenanceTriggers": [
      "file creation",
      "file deletion",
      "file movement",
      "directory restructuring"
    ],
    "conflictResolution": "flag conflicts and propose merges"
  },
  "archiving": {
    "triggers": {
      "size_limit": {
        "files": ["projectlogic.jsonl", "noteworthy.json"],
        "process": [
          "Check file size before every write",
          "If size >= limit: rename with archive date suffix",
          "Create new file with latest entry + archive reference"
        ]
      },
      "completion": {
        "files": ["task files", "sidequest files", "implementation plans"],
        "process": [
          "Move to archive directory",
          "Update completion metadata",
          "Preserve reference links"
        ]
      }
    },
    "configuration": {
      "projectlogicSizeLimit": "2MB",
      "noteworthySizeLimit": "1MB",
      "deleteArchivesOlderThan": "90 days"
    }
  },
  "validation": {
    "crossReference": {
      "tasks": ["milestone exists", "theme exists", "flow exists"],
      "themes": ["paths exist", "linked themes exist", "shared files documented"],
      "flows": ["pages exist", "steps complete", "outcomes defined"]
    },
    "schemas": {
      "allJsonFiles": "Must conform to their defined schemas",
      "taskFiles": "Must include required integrations",
      "themeFiles": "Must include required structure"
    },
    "consistency": {
      "fileReferences": "All referenced files must exist or be marked as pending",
      "dependencies": "All dependencies must be properly defined",
      "completionCriteria": "All completion criteria must be clear"
    }
  },
  "sessionManagement": {
    "bootSequence": [
      "Identify current instance (main or branch instance)",
      "Detect project code changes since last session (main instance only)",
      "Read ProjectBlueprint for project understanding",
      "Read ProjectFlow for user experience context",
      "Read projectlogic.jsonl for decision history",
      "Read completion-path.json for milestone status",
      "Check for active implementation plan",
      "Review active tasks in context",
      "Generate tasks for current phase",
      "Load theme context for selected tasks",
      "Begin task execution"
    ],
    "instanceAwareness": {
      "mainInstance": {
        "identification": "Presence of .mcp-instance-main file",
        "responsibilities": ["Git change detection", "Merge conflict resolution", "Instance coordination"],
        "authority": "Primary decision maker for all merge conflicts"
      },
      "branchInstance": {
        "identification": "Presence of .mcp-branch-info.json file",
        "responsibilities": ["Independent development", "Prepare for merge"],
        "isolation": "Operates independently without affecting main or other instances"
      }
    },
    "stateFiles": {
      "active tasks": "Current work in progress",
      "implementation plans": "Strategic context for current milestone",
      "projectlogic.jsonl": "Decision history and reasoning",
      "noteworthy.json": "Recent noteworthy events",
      "instance metadata": "Instance identification and purpose (branch instances)",
      "merge history": "Conflict resolution decisions (.mcp-merge-log.jsonl)"
    }
  },
  "gitInstanceConfiguration": {
    "git": {
      "enabled": true,
      "repository_location": "project_root",
      "auto_init_repo": true,
      "code_change_detection": true,
      "auto_reconcile_on_boot": true
    },
    "instance_management": {
      "enabled": true,
      "main_instance_authority": true,
      "max_active_instances": 10,
      "instance_naming_validation": true,
      "auto_archive_completed": true,
      "merge_conflict_resolution": "interactive"
    },
    "conflict_resolution": {
      "resolution_strategies": ["accept_main", "accept_instance", "manual_merge"],
      "auto_resolve_simple_conflicts": false,
      "require_main_instance_approval": true,
      "preserve_resolution_history": true
    }
  },
  "references": {
    "examples": "reference/templates/",
    "schemas": "reference/templates/",
    "templates": "reference/templates/",
    "humanDocs": "docs/"
  }
}