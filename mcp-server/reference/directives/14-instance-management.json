{
  "metadata": {
    "id": "14-instance-management",
    "title": "Git-Like Instance Management Directives",
    "priority": "high",
    "frequency": "instance-operations",
    "version": "1.0.0",
    "humanReadable": "../docs/directives/14-instance-management.md"
  },
  "triggers": [
    "Instance creation request",
    "Multiple developer scenario",
    "Parallel development needed",
    "Instance merge operations",
    "Workspace isolation required"
  ],
  "workflows": {
    "mainInstanceSetup": {
      "directive": "Initialize main instance identification (done once per project)",
      "when": "Project initialization or first instance creation",
      "steps": [
        {
          "action": "createMainInstanceMarker",
          "description": "Create identification marker for main instance",
          "required": true,
          "process": [
            "Create projectManagement/.mcp-instance-main from template",
            "This file identifies the canonical organizational state",
            "Main instance NEVER gets .mcp-branch-info.json or .mcp-work-summary.md"
          ]
        },
        {
          "action": "initializeInstanceManagement",
          "description": "Set up project-level instance management structure",
          "required": true,
          "process": [
            "Create .mcp-instances/ directory structure",
            "Create .mcp-instances/.mcp-config.json from template (optional)",
            "Initialize .mcp-instances/.mcp-merge-log.jsonl (empty initially)"
          ]
        }
      ]
    },
    "instanceCreation": {
      "directive": "Create Git-like instances for parallel development with complete workspace isolation",
      "steps": [
        {
          "action": "validateMainInstanceState",
          "description": "Ensure main instance is in clean, consistent state before creating branch instance",
          "required": true,
          "validation": [
            "No uncommitted organizational changes",
            "Database is consistent",
            "No active conflicts"
          ]
        },
        {
          "action": "generateInstanceName",
          "description": "Generate instance name following convention: {theme/area}-{purpose}-{user}",
          "required": true,
          "format": "{theme/area}-{purpose}-{user} or {theme/area}-{purpose}",
          "examples": [
            "auth-enhancement-alice",
            "payment-integration",
            "ui-components-refactor-bob"
          ]
        },
        {
          "action": "createInstanceWorkspace",
          "description": "Copy main projectManagement/ to instance workspace with isolation",
          "required": true,
          "process": [
            "Copy projectManagement/ to .mcp-instances/active/{instance-name}/projectManagement/",
            "Copy main project.db to .mcp-instances/active/{instance-name}/projectManagement/project.db",
            "Create .mcp-instances/active/{instance-name}/.mcp-branch-info.json from template",
            "Create .mcp-instances/active/{instance-name}/.mcp-work-summary.md from template",
            "NEVER create these files in main projectManagement/ directory"
          ]
        },
        {
          "action": "registerInstance",
          "description": "Register instance in database and prevent naming conflicts",
          "required": true,
          "database_operations": [
            "Insert into mcp_instances table",
            "Record Git base hash",
            "Set status to 'active'",
            "Initialize instance workspace file tracking"
          ]
        }
      ]
    },
    "instanceIsolation": {
      "directive": "Maintain complete isolation between instances during development",
      "steps": [
        {
          "action": "enforceWorkspaceIsolation",
          "description": "Ensure instance operates only within its isolated workspace",
          "required": true,
          "isolation_rules": [
            "Instance only modifies files in its workspace",
            "Instance database changes are isolated",
            "No cross-instance interference",
            "Main instance remains unaffected"
          ]
        },
        {
          "action": "trackInstanceChanges",
          "description": "Track all changes made within instance workspace",
          "required": true,
          "tracking": [
            "File modifications with timestamps",
            "Organizational state changes",
            "Database modifications",
            "Theme and flow updates"
          ]
        }
      ]
    },
    "instanceMerging": {
      "directive": "Handle Git-like merging with main instance authority for conflict resolution",
      "steps": [
        {
          "action": "initiatePreMergeValidation",
          "description": "Validate both main and instance states before merge",
          "required": true,
          "validation": [
            "Main instance is in clean state",
            "Instance is ready for merge (no incomplete tasks)",
            "Check for external project code changes",
            "Validate instance workspace integrity"
          ]
        },
        {
          "action": "detectConflicts",
          "description": "Comprehensive conflict detection across all organizational components",
          "required": true,
          "conflict_types": [
            "Theme conflicts - same theme modified in both locations",
            "Task conflicts - task status changes in both locations", 
            "Flow conflicts - flow definitions diverged",
            "Database conflicts - incompatible database changes"
          ]
        },
        {
          "action": "presentConflictsToMainInstance",
          "description": "Main instance has primary decision authority for all conflicts",
          "required": true,
          "authority_principle": "Main instance is PRIMARY DECISION MAKER for all conflict resolution",
          "presentation": [
            "Show Git-like conflict markers",
            "Present resolution options clearly",
            "Allow main instance to choose strategy",
            "No complex coordination needed"
          ]
        },
        {
          "action": "applyResolutionStrategy",
          "description": "Apply chosen resolution strategy to resolve conflicts",
          "required": true,
          "strategies": [
            "accept_instance - Use instance changes",
            "accept_main - Keep main version",
            "manual_merge - Combine specific elements",
            "split_approach - Create separate components"
          ]
        },
        {
          "action": "completeMerge",
          "description": "Complete merge process and clean up instance",
          "required": true,
          "completion": [
            "Apply resolved changes to main workspace",
            "Update main database with merged state",
            "Archive instance to .mcp-instances/completed/",
            "Log merge decisions in .mcp-merge-log.jsonl using reference/templates/mcp-merge-log.jsonl format"
          ]
        }
      ]
    },
    "instanceManagement": {
      "directive": "Manage instance lifecycle and coordination",
      "steps": [
        {
          "action": "listActiveInstances",
          "description": "Show all active instances with status and metadata",
          "required": false,
          "information": [
            "Instance names and purposes",
            "Creation dates and creators",
            "Primary themes being worked on",
            "Last activity timestamps"
          ]
        },
        {
          "action": "getInstanceStatus",
          "description": "Get detailed status of specific instance",
          "required": false,
          "status_info": [
            "Instance metadata",
            "Workspace file changes",
            "Database modifications",
            "Merge readiness assessment"
          ]
        },
        {
          "action": "archiveInstance",
          "description": "Archive completed or cancelled instances",
          "required": false,
          "archival": [
            "Move to .mcp-instances/completed/",
            "Update database status",
            "Preserve instance metadata",
            "Clean up active workspace"
          ]
        }
      ]
    }
  },
  "instanceNamingConventions": {
    "format": "{theme/area}-{purpose}-{user} or {theme/area}-{purpose}",
    "examples": [
      "auth-enhancement-alice - Alice working on authentication improvements",
      "payment-integration - Autonomous work on payment system integration",
      "ui-components-refactor-bob - Bob refactoring UI components",
      "database-optimization - Database performance improvements",
      "api-security-audit - Security audit of API endpoints"
    ],
    "validation": [
      "Must be descriptive of work being done",
      "Include theme/area being modified",
      "Include user name if user-specific work",
      "Use kebab-case format",
      "No spaces or special characters"
    ]
  },
  "mainInstanceAuthority": {
    "principle": "Main instance is the canonical source of truth and primary decision maker",
    "authority": [
      "All merge conflicts resolved by main instance",
      "Main instance decides resolution strategy",
      "No complex coordination between instances",
      "Branch instances adapt to main decisions"
    ],
    "responsibilities": {
      "mainInstance": [
        "Git repository change detection",
        "Merge conflict resolution with primary decision authority", 
        "Instance coordination and management",
        "Project code change impact assessment"
      ],
      "branchInstance": [
        "Independent development within isolated workspace",
        "Prepare organizational changes for merge",
        "Maintain instance metadata and work summaries"
      ]
    }
  },
  "templateUsage": {
    "directive": "MANDATORY: All instance files must be created from templates to ensure consistency",
    "requiredTemplates": {
      ".mcp-branch-info.json": {
        "template": "reference/templates/mcp-branch-info.json",
        "usage": "mandatory",
        "purpose": "Branch instance metadata and tracking information",
        "location": ".mcp-instances/active/{instance-name}/.mcp-branch-info.json",
        "when": "Branch instance creation only",
        "notUsedBy": "main instance"
      },
      ".mcp-work-summary.md": {
        "template": "reference/templates/mcp-work-summary.md", 
        "usage": "mandatory",
        "purpose": "Human-readable work summary and progress tracking",
        "location": ".mcp-instances/active/{instance-name}/.mcp-work-summary.md",
        "when": "Branch instance creation, updated throughout work",
        "notUsedBy": "main instance"
      },
      ".mcp-instance-main": {
        "template": "simple marker file",
        "usage": "mandatory",
        "purpose": "Main instance identification marker",
        "location": "projectManagement/.mcp-instance-main",
        "when": "Main instance setup",
        "content": "empty file or simple identifier"
      },
      ".mcp-config.json": {
        "template": "reference/templates/mcp-config.json",
        "usage": "recommended", 
        "purpose": "Project-wide instance management configuration",
        "location": ".mcp-instances/.mcp-config.json",
        "when": "First instance creation in project",
        "scope": "project-level, not instance-specific"
      },
      ".mcp-merge-log.jsonl": {
        "template": "reference/templates/mcp-merge-log.jsonl",
        "usage": "mandatory",
        "purpose": "Project-wide merge operation audit trail",
        "location": ".mcp-instances/.mcp-merge-log.jsonl",
        "when": "Every merge operation",
        "scope": "project-level, tracks all instance merges"
      }
    },
    "templateSubstitution": {
      "process": [
        "Load template file from reference/templates/ directory",
        "Replace template variables with actual instance values",
        "Validate required fields are populated",
        "Write instantiated file to instance workspace"
      ],
      "variables": {
        "instanceId": "Generated instance identifier",
        "createdAt": "ISO timestamp of creation",
        "createdBy": "User or AI identifier",
        "purpose": "Description of instance work",
        "primaryThemes": "Array of theme names",
        "gitBaseHash": "Current Git commit hash"
      }
    }
  },
  "cleanupAndRetention": {
    "directive": "Automated cleanup system to prevent instance accumulation and data bloat",
    "mergeFrequency": {
      "triggerConditions": [
        "User-initiated when instance work complete",
        "Stale instance warnings after 7 days inactive", 
        "Forced cleanup at 30-day timeout (configurable)",
        "Pre-merge validation must pass before any merge"
      ],
      "noAutomaticMerges": "System NEVER auto-merges without user approval - only warns and prompts"
    },
    "cleanupSchedules": {
      "daily": ["Stale instance detection", "Warning notifications", "Orphaned file cleanup"],
      "weekly": ["Archive retention enforcement", "Cleanup summary report", "Disk space optimization"],
      "monthly": ["Deep archive review", "Log retention enforcement", "Performance optimization"]
    },
    "staleInstanceManagement": {
      "detectionCriteria": ["No activity > 14 days", "Instance age > 30 days", "No active tasks"],
      "escalationProcess": ["Day 7: Warning", "Day 14: Merge reminder", "Day 21: Final warning", "Day 30: Force archive"],
      "userOptions": ["Extend duration", "Merge immediately", "Archive manually", "Delete instance"]
    },
    "retentionPolicies": {
      "completedInstances": "90 days (configurable)",
      "mergeLogs": "1 year (configurable)", 
      "backups": "30 days (configurable)",
      "orphanedFiles": "Delete immediately"
    }
  },
  "errorHandling": {
    "instanceCreationFailure": "Clean up partial workspace and report clear error to user",
    "mergeCon flictResolution": "Provide rollback option and preserve both versions if resolution fails",
    "workspaceCorruption": "Use error recovery system to restore from backup",
    "databaseConflicts": "Use database conflict resolution with schema upgrade options"
  },
  "dependencies": [
    ".mcp-instances/ directory structure",
    "projectManagement/ workspace",
    "project.db database",
    "reference/templates/mcp-branch-info.json",
    "reference/templates/mcp-work-summary.md", 
    "reference/templates/mcp-config.json",
    "reference/templates/mcp-merge-log.jsonl"
  ],
  "integrationPoints": {
    "gitIntegration": "Coordinate with Git integration for code change detection",
    "conflictResolution": "Use conflict resolution engine for merge operations", 
    "auditSystem": "Log all instance operations for compliance and tracking",
    "performanceOptimizer": "Optimize for large projects with many instances"
  }
}