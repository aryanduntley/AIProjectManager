

"project": {
    "name": "Example Project",
    "maxFileLineCount": 900,
    "avoidPlaceholders": false,
    if true, avoid all placeholders (pending, todo, in a real implementation, etc.), if false, create placeholders only when necessary (scaffolding for example, deeper implementations to be done later) and ensure that all placeholders are recorded in the organizational todos.jsonl file
    "autoModularize": true,
    if true, before modifying files, read line numbers, if line numbers will likely equal or exceed the maxfilelinecount, modularize the file (function groups, etc).
    "backwardsCompatibility": true,
    Whether to code for backwards compatability. If true, legacy code valide, if false, this means in dev and never been to production. If false means new code, do not create legacy implementations, remove or replace old code and files.
    "productionMode": true
    If in production mode, all code must be coded in a production readiness state

  },
  "documentation": {
    "readmeJsonFilename": "README",
    "readmeMdFilename": "README", 
    When creating readme files, ensure that the corret naming is being used
    "autoUpdateReadme": true,
    If false, user wants to approve updates before saved
    "includeFileChains": true,
    "includeThemeReferences": true,
    "trackLastAssessment": true,
    "lastUpdatedBehavior": "overwrite"
  },
  "contextLoading": {
    "defaultMode": "theme-focused",
    "escalationEnabled": true,
    "readmeFirst": true,
    what does this mean?
    "contextModes": [
      {
        "mode": "theme-focused",
        "description": "Load primary theme + directly related themes"
      },
      {
        "mode": "theme-expanded", 
        "description": "Load theme group when themes are interconnected"
      },
      {
        "mode": "project-wide",
        "description": "Full project context (rare, only for architectural changes)"
      }
    ]
  },
  "tasks": {
	"autoTaskCreation": false,
    "parallelTasksEnabled": true,
    sidequests I assume?
    "maxActiveTasks": 3,
    should rename to max active sidequests
    "resumeTasksOnStart": false,
    "statusMarkers": [
      "pending",
      "in-progress", 
      "blocked",
      "reviewing",
      "completed",
      "cancelled"
    ]
  },
  "logging": {
    "maxTotalSize": "100MB",
    This is too large for cycling noteworthy, project logic and tasks (although tasks get archived after the tasks in the file are complete)
  },
  "placeholders": {
    "trackPlaceholders": true,,
    "customMarkers": ["HACK", "REVIEW", "SECURITY"], 
    "priorityMapping": {
      "TODO": "medium",
      "FIXME": "high",
      "HACK": "high",
      "OPTIMIZE": "low",
      "REVIEW": "medium",
      "SECURITY": "high"
    }
  },
  identify where in directives I added note to create placeholder review. It should be added in the completion-path.json file before completion. Or last milestone. User can also request to generate a task file for placeholders at any time.
  "themes": {
    "autoDiscovery": true,
    "discoveryKeywords": [
      "auth", "authentication", "login", "register",
      "payment", "billing", "transaction", "stripe",
      "user", "profile", "account", "admin",
      "api", "endpoint", "controller", "service",
      "database", "model", "schema", "migration",
      "ui", "component", "page", "layout",
      "test", "spec", "mock", "fixture",
      "config", "environment", "settings"
    ],
	Not limited to in any way. Just examples of things to look for. Is this list actually useful? Should we fill it up with all sorts of keywords?
    "updateOnFileChange": true,
	update what file on change of what?
    "conflictResolution": "merge",
    "sharedFileThreshold": 3
	This is for themes that share files with other themes.
  },
  "validation": {
    "enforceTaskMilestoneReference": true,
    "enforceTaskThemeReference": true,
    "enforceSubtaskFlowReference": true,
    "validateFileExistence": true,
    "requireApprovalForStructureChanges": true,
    "validateJsonSchemas": true
	We need to add a check for all of these in directives.
  },
  "ai": {
    "contextLoadingStrategy": "intelligent",
    "maxContextFiles": 50,
    "preferRecentFiles": true,
    "includeRelatedThemes": true,
    "loadFlowSteps": true
  },
  "development": {
    "testFramework": "jest",
    "linter": "eslint",
    "formatter": "prettier",
    "typeChecker": "typescript",
    "buildTool": "vite",
    "packageManager": "npm"
	This should not be in cofig but rather in ProjectBlueprint/metadata.json. These should not be config or settings, but rather simply noted in regards to the project structure. If a user decided to simply change the setting packageManger, how would that be handled? Everything would have to stop, packages would have to be replaced with whatever new packageMangager, code would have to be modified potentially, this should definitely not be a user setting. Just noted in ProjectBlueprint/metadata.json and then these things can be changed or modified after user discusses with AI and a plan is made. Those steps would be added to projectlogic and possibly noteworthy, and a task file would be created, an implementation plan, etc. 
  },
  "deployment": {
    "environment": "development",
    "dockerEnabled": true,
    "cicdEnabled": true,
    "monitoringEnabled": false,
    "backupEnabled": false
	Same as above
  },
  "security": {
    "sensitiveDataDetection": true,
    "secretsScanning": true,
	what is this?
    "dependencyScanning": true,
	explain this
    "rateLimit": {
      "enabled": true,
      "requests": 100,
      "windowMinutes": 15
    }
	rate limit for what?
  },
  "performance": {
    "cacheEnabled": true,
	what cache? standard AI cache? do we need this as this organizational MCP should sit on top of AI's default handling. I assume these settings are in that default handling somewhere.
    "bundleAnalysis": true,
    "performanceMonitoring": false,
    "optimizationEnabled": true
	Need to discuss all of these.
  },
  "customSettings": {
    "teamPreferences": {
      "codeStyle": "functional",
      "testingApproach": "test-driven",
      "reviewRequirement": "mandatory"
	  need to discuss these
    },
    "integrations": {
      "slack": {
        "enabled": false,
        "webhook": null,
        "channel": "#dev-team"
      },
      "github": {
        "enabled": true,
        "autoCreateIssues": false,
        "labelPrefix": "mcp-"
      }
	  Same issue as "development"